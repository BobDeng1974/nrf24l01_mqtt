
home_control_center.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002698  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080027a4  080027a4  000127a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080027fc  080027fc  000127fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002800  08002800  00012800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08002804  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000818  20000010  08002814  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000828  08002814  00020828  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00008807  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001600  00000000  00000000  00028840  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000690  00000000  00000000  00029e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005f8  00000000  00000000  0002a4d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002b09  00000000  00000000  0002aac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002418  00000000  00000000  0002d5d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002f9e9  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000019d4  00000000  00000000  0002fa68  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0003143c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	0800278c 	.word	0x0800278c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	0800278c 	.word	0x0800278c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800015c:	b480      	push	{r7}
 800015e:	b089      	sub	sp, #36	; 0x24
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000166:	2300      	movs	r3, #0
 8000168:	61fb      	str	r3, [r7, #28]
 800016a:	2300      	movs	r3, #0
 800016c:	613b      	str	r3, [r7, #16]
 800016e:	2300      	movs	r3, #0
 8000170:	61bb      	str	r3, [r7, #24]
 8000172:	2300      	movs	r3, #0
 8000174:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000176:	2300      	movs	r3, #0
 8000178:	617b      	str	r3, [r7, #20]
 800017a:	2300      	movs	r3, #0
 800017c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800017e:	683b      	ldr	r3, [r7, #0]
 8000180:	78db      	ldrb	r3, [r3, #3]
 8000182:	f003 030f 	and.w	r3, r3, #15
 8000186:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000188:	683b      	ldr	r3, [r7, #0]
 800018a:	78db      	ldrb	r3, [r3, #3]
 800018c:	f003 0310 	and.w	r3, r3, #16
 8000190:	2b00      	cmp	r3, #0
 8000192:	d005      	beq.n	80001a0 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000194:	683b      	ldr	r3, [r7, #0]
 8000196:	789b      	ldrb	r3, [r3, #2]
 8000198:	461a      	mov	r2, r3
 800019a:	69fb      	ldr	r3, [r7, #28]
 800019c:	4313      	orrs	r3, r2
 800019e:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80001a0:	683b      	ldr	r3, [r7, #0]
 80001a2:	881b      	ldrh	r3, [r3, #0]
 80001a4:	b2db      	uxtb	r3, r3
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d044      	beq.n	8000234 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80001b0:	2300      	movs	r3, #0
 80001b2:	61bb      	str	r3, [r7, #24]
 80001b4:	e038      	b.n	8000228 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80001b6:	2201      	movs	r2, #1
 80001b8:	69bb      	ldr	r3, [r7, #24]
 80001ba:	fa02 f303 	lsl.w	r3, r2, r3
 80001be:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80001c0:	683b      	ldr	r3, [r7, #0]
 80001c2:	881b      	ldrh	r3, [r3, #0]
 80001c4:	461a      	mov	r2, r3
 80001c6:	68fb      	ldr	r3, [r7, #12]
 80001c8:	4013      	ands	r3, r2
 80001ca:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80001cc:	693a      	ldr	r2, [r7, #16]
 80001ce:	68fb      	ldr	r3, [r7, #12]
 80001d0:	429a      	cmp	r2, r3
 80001d2:	d126      	bne.n	8000222 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80001d4:	69bb      	ldr	r3, [r7, #24]
 80001d6:	009b      	lsls	r3, r3, #2
 80001d8:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80001da:	220f      	movs	r2, #15
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	fa02 f303 	lsl.w	r3, r2, r3
 80001e2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80001e4:	68bb      	ldr	r3, [r7, #8]
 80001e6:	43db      	mvns	r3, r3
 80001e8:	697a      	ldr	r2, [r7, #20]
 80001ea:	4013      	ands	r3, r2
 80001ec:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80001ee:	69fa      	ldr	r2, [r7, #28]
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	fa02 f303 	lsl.w	r3, r2, r3
 80001f6:	697a      	ldr	r2, [r7, #20]
 80001f8:	4313      	orrs	r3, r2
 80001fa:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80001fc:	683b      	ldr	r3, [r7, #0]
 80001fe:	78db      	ldrb	r3, [r3, #3]
 8000200:	2b28      	cmp	r3, #40	; 0x28
 8000202:	d105      	bne.n	8000210 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000204:	2201      	movs	r2, #1
 8000206:	69bb      	ldr	r3, [r7, #24]
 8000208:	409a      	lsls	r2, r3
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	615a      	str	r2, [r3, #20]
 800020e:	e008      	b.n	8000222 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000210:	683b      	ldr	r3, [r7, #0]
 8000212:	78db      	ldrb	r3, [r3, #3]
 8000214:	2b48      	cmp	r3, #72	; 0x48
 8000216:	d104      	bne.n	8000222 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000218:	2201      	movs	r2, #1
 800021a:	69bb      	ldr	r3, [r7, #24]
 800021c:	409a      	lsls	r2, r3
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000222:	69bb      	ldr	r3, [r7, #24]
 8000224:	3301      	adds	r3, #1
 8000226:	61bb      	str	r3, [r7, #24]
 8000228:	69bb      	ldr	r3, [r7, #24]
 800022a:	2b07      	cmp	r3, #7
 800022c:	d9c3      	bls.n	80001b6 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	697a      	ldr	r2, [r7, #20]
 8000232:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	881b      	ldrh	r3, [r3, #0]
 8000238:	2bff      	cmp	r3, #255	; 0xff
 800023a:	d946      	bls.n	80002ca <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	685b      	ldr	r3, [r3, #4]
 8000240:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000242:	2300      	movs	r3, #0
 8000244:	61bb      	str	r3, [r7, #24]
 8000246:	e03a      	b.n	80002be <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000248:	69bb      	ldr	r3, [r7, #24]
 800024a:	3308      	adds	r3, #8
 800024c:	2201      	movs	r2, #1
 800024e:	fa02 f303 	lsl.w	r3, r2, r3
 8000252:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000254:	683b      	ldr	r3, [r7, #0]
 8000256:	881b      	ldrh	r3, [r3, #0]
 8000258:	461a      	mov	r2, r3
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	4013      	ands	r3, r2
 800025e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000260:	693a      	ldr	r2, [r7, #16]
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	429a      	cmp	r2, r3
 8000266:	d127      	bne.n	80002b8 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000268:	69bb      	ldr	r3, [r7, #24]
 800026a:	009b      	lsls	r3, r3, #2
 800026c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800026e:	220f      	movs	r2, #15
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	fa02 f303 	lsl.w	r3, r2, r3
 8000276:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	43db      	mvns	r3, r3
 800027c:	697a      	ldr	r2, [r7, #20]
 800027e:	4013      	ands	r3, r2
 8000280:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000282:	69fa      	ldr	r2, [r7, #28]
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	fa02 f303 	lsl.w	r3, r2, r3
 800028a:	697a      	ldr	r2, [r7, #20]
 800028c:	4313      	orrs	r3, r2
 800028e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	78db      	ldrb	r3, [r3, #3]
 8000294:	2b28      	cmp	r3, #40	; 0x28
 8000296:	d105      	bne.n	80002a4 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000298:	69bb      	ldr	r3, [r7, #24]
 800029a:	3308      	adds	r3, #8
 800029c:	2201      	movs	r2, #1
 800029e:	409a      	lsls	r2, r3
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	78db      	ldrb	r3, [r3, #3]
 80002a8:	2b48      	cmp	r3, #72	; 0x48
 80002aa:	d105      	bne.n	80002b8 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80002ac:	69bb      	ldr	r3, [r7, #24]
 80002ae:	3308      	adds	r3, #8
 80002b0:	2201      	movs	r2, #1
 80002b2:	409a      	lsls	r2, r3
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80002b8:	69bb      	ldr	r3, [r7, #24]
 80002ba:	3301      	adds	r3, #1
 80002bc:	61bb      	str	r3, [r7, #24]
 80002be:	69bb      	ldr	r3, [r7, #24]
 80002c0:	2b07      	cmp	r3, #7
 80002c2:	d9c1      	bls.n	8000248 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	697a      	ldr	r2, [r7, #20]
 80002c8:	605a      	str	r2, [r3, #4]
  }
}
 80002ca:	bf00      	nop
 80002cc:	3724      	adds	r7, #36	; 0x24
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr

080002d4 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
 80002dc:	460b      	mov	r3, r1
 80002de:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 80002e0:	887a      	ldrh	r2, [r7, #2]
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	611a      	str	r2, [r3, #16]
}
 80002e6:	bf00      	nop
 80002e8:	370c      	adds	r7, #12
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bc80      	pop	{r7}
 80002ee:	4770      	bx	lr

080002f0 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
 80002f8:	460b      	mov	r3, r1
 80002fa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80002fc:	887a      	ldrh	r2, [r7, #2]
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	615a      	str	r2, [r3, #20]
}
 8000302:	bf00      	nop
 8000304:	370c      	adds	r7, #12
 8000306:	46bd      	mov	sp, r7
 8000308:	bc80      	pop	{r7}
 800030a:	4770      	bx	lr

0800030c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	460b      	mov	r3, r1
 8000316:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000318:	78fb      	ldrb	r3, [r7, #3]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d006      	beq.n	800032c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800031e:	4909      	ldr	r1, [pc, #36]	; (8000344 <RCC_APB2PeriphClockCmd+0x38>)
 8000320:	4b08      	ldr	r3, [pc, #32]	; (8000344 <RCC_APB2PeriphClockCmd+0x38>)
 8000322:	699a      	ldr	r2, [r3, #24]
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	4313      	orrs	r3, r2
 8000328:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800032a:	e006      	b.n	800033a <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800032c:	4905      	ldr	r1, [pc, #20]	; (8000344 <RCC_APB2PeriphClockCmd+0x38>)
 800032e:	4b05      	ldr	r3, [pc, #20]	; (8000344 <RCC_APB2PeriphClockCmd+0x38>)
 8000330:	699a      	ldr	r2, [r3, #24]
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	43db      	mvns	r3, r3
 8000336:	4013      	ands	r3, r2
 8000338:	618b      	str	r3, [r1, #24]
}
 800033a:	bf00      	nop
 800033c:	370c      	adds	r7, #12
 800033e:	46bd      	mov	sp, r7
 8000340:	bc80      	pop	{r7}
 8000342:	4770      	bx	lr
 8000344:	40021000 	.word	0x40021000

08000348 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8000348:	b480      	push	{r7}
 800034a:	b085      	sub	sp, #20
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
 8000350:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8000352:	2300      	movs	r3, #0
 8000354:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	881b      	ldrh	r3, [r3, #0]
 800035a:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 800035c:	89fb      	ldrh	r3, [r7, #14]
 800035e:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8000362:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000364:	683b      	ldr	r3, [r7, #0]
 8000366:	881a      	ldrh	r2, [r3, #0]
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	885b      	ldrh	r3, [r3, #2]
 800036c:	4313      	orrs	r3, r2
 800036e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000370:	683b      	ldr	r3, [r7, #0]
 8000372:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000374:	4313      	orrs	r3, r2
 8000376:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000378:	683b      	ldr	r3, [r7, #0]
 800037a:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800037c:	4313      	orrs	r3, r2
 800037e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000380:	683b      	ldr	r3, [r7, #0]
 8000382:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000384:	4313      	orrs	r3, r2
 8000386:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000388:	683b      	ldr	r3, [r7, #0]
 800038a:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800038c:	4313      	orrs	r3, r2
 800038e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000394:	4313      	orrs	r3, r2
 8000396:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000398:	683b      	ldr	r3, [r7, #0]
 800039a:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800039c:	4313      	orrs	r3, r2
 800039e:	b29a      	uxth	r2, r3
 80003a0:	89fb      	ldrh	r3, [r7, #14]
 80003a2:	4313      	orrs	r3, r2
 80003a4:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	89fa      	ldrh	r2, [r7, #14]
 80003aa:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	8b9b      	ldrh	r3, [r3, #28]
 80003b0:	b29b      	uxth	r3, r3
 80003b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80003b6:	b29a      	uxth	r2, r3
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	8a1a      	ldrh	r2, [r3, #16]
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	821a      	strh	r2, [r3, #16]
}
 80003c4:	bf00      	nop
 80003c6:	3714      	adds	r7, #20
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bc80      	pop	{r7}
 80003cc:	4770      	bx	lr

080003ce <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80003ce:	b480      	push	{r7}
 80003d0:	b083      	sub	sp, #12
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	6078      	str	r0, [r7, #4]
 80003d6:	460b      	mov	r3, r1
 80003d8:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80003da:	78fb      	ldrb	r3, [r7, #3]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d008      	beq.n	80003f2 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	881b      	ldrh	r3, [r3, #0]
 80003e4:	b29b      	uxth	r3, r3
 80003e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003ea:	b29a      	uxth	r2, r3
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 80003f0:	e007      	b.n	8000402 <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	881b      	ldrh	r3, [r3, #0]
 80003f6:	b29b      	uxth	r3, r3
 80003f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80003fc:	b29a      	uxth	r2, r3
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	801a      	strh	r2, [r3, #0]
}
 8000402:	bf00      	nop
 8000404:	370c      	adds	r7, #12
 8000406:	46bd      	mov	sp, r7
 8000408:	bc80      	pop	{r7}
 800040a:	4770      	bx	lr

0800040c <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
 8000414:	460b      	mov	r3, r1
 8000416:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	887a      	ldrh	r2, [r7, #2]
 800041c:	819a      	strh	r2, [r3, #12]
}
 800041e:	bf00      	nop
 8000420:	370c      	adds	r7, #12
 8000422:	46bd      	mov	sp, r7
 8000424:	bc80      	pop	{r7}
 8000426:	4770      	bx	lr

08000428 <SPI_I2S_ReceiveData>:
  *   - 1, 2 or 3 in SPI mode 
  *   - 2 or 3 in I2S mode
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	899b      	ldrh	r3, [r3, #12]
 8000434:	b29b      	uxth	r3, r3
}
 8000436:	4618      	mov	r0, r3
 8000438:	370c      	adds	r7, #12
 800043a:	46bd      	mov	sp, r7
 800043c:	bc80      	pop	{r7}
 800043e:	4770      	bx	lr

08000440 <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
 8000448:	460b      	mov	r3, r1
 800044a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800044c:	78fb      	ldrb	r3, [r7, #3]
 800044e:	2b00      	cmp	r3, #0
 8000450:	d008      	beq.n	8000464 <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= CR2_SSOE_Set;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	889b      	ldrh	r3, [r3, #4]
 8000456:	b29b      	uxth	r3, r3
 8000458:	f043 0304 	orr.w	r3, r3, #4
 800045c:	b29a      	uxth	r2, r3
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= CR2_SSOE_Reset;
  }
}
 8000462:	e007      	b.n	8000474 <SPI_SSOutputCmd+0x34>
    SPIx->CR2 &= CR2_SSOE_Reset;
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	889b      	ldrh	r3, [r3, #4]
 8000468:	b29b      	uxth	r3, r3
 800046a:	f023 0304 	bic.w	r3, r3, #4
 800046e:	b29a      	uxth	r2, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	809a      	strh	r2, [r3, #4]
}
 8000474:	bf00      	nop
 8000476:	370c      	adds	r7, #12
 8000478:	46bd      	mov	sp, r7
 800047a:	bc80      	pop	{r7}
 800047c:	4770      	bx	lr

0800047e <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800047e:	b480      	push	{r7}
 8000480:	b085      	sub	sp, #20
 8000482:	af00      	add	r7, sp, #0
 8000484:	6078      	str	r0, [r7, #4]
 8000486:	460b      	mov	r3, r1
 8000488:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800048a:	2300      	movs	r3, #0
 800048c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	891b      	ldrh	r3, [r3, #8]
 8000492:	b29a      	uxth	r2, r3
 8000494:	887b      	ldrh	r3, [r7, #2]
 8000496:	4013      	ands	r3, r2
 8000498:	b29b      	uxth	r3, r3
 800049a:	2b00      	cmp	r3, #0
 800049c:	d002      	beq.n	80004a4 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800049e:	2301      	movs	r3, #1
 80004a0:	73fb      	strb	r3, [r7, #15]
 80004a2:	e001      	b.n	80004a8 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80004a4:	2300      	movs	r3, #0
 80004a6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80004a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	3714      	adds	r7, #20
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr

080004b4 <packet_send_localhost>:



local_host_t local_host;

void packet_send_localhost(uint8_t * data, uint8_t size){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	460b      	mov	r3, r1
 80004be:	70fb      	strb	r3, [r7, #3]
	memcpy(local_host.data, data, size);
 80004c0:	78fb      	ldrb	r3, [r7, #3]
 80004c2:	461a      	mov	r2, r3
 80004c4:	6879      	ldr	r1, [r7, #4]
 80004c6:	4805      	ldr	r0, [pc, #20]	; (80004dc <packet_send_localhost+0x28>)
 80004c8:	f002 f94c 	bl	8002764 <memcpy>
	local_host.len = size;
 80004cc:	4a03      	ldr	r2, [pc, #12]	; (80004dc <packet_send_localhost+0x28>)
 80004ce:	78fb      	ldrb	r3, [r7, #3]
 80004d0:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
}
 80004d4:	bf00      	nop
 80004d6:	3708      	adds	r7, #8
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	20000040 	.word	0x20000040

080004e0 <mqtt_message_cb>:
//int mqtt_send(void* socket_info, const void* buf, unsigned int count){
//	l3_send_packet(tx_address, buf, count);
//}
//

	int mqtt_message_cb(struct _MqttClient *client, MqttMessage *message, byte msg_new, byte msg_done){
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	4611      	mov	r1, r2
 80004ec:	461a      	mov	r2, r3
 80004ee:	460b      	mov	r3, r1
 80004f0:	71fb      	strb	r3, [r7, #7]
 80004f2:	4613      	mov	r3, r2
 80004f4:	71bb      	strb	r3, [r7, #6]
		return 1;
 80004f6:	2301      	movs	r3, #1
	}
 80004f8:	4618      	mov	r0, r3
 80004fa:	3714      	adds	r7, #20
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bc80      	pop	{r7}
 8000500:	4770      	bx	lr

08000502 <mqt_net_connect_cb>:


	int mqt_net_connect_cb (void *context, const char* host, word16 port, int timeout_ms){
 8000502:	b480      	push	{r7}
 8000504:	b085      	sub	sp, #20
 8000506:	af00      	add	r7, sp, #0
 8000508:	60f8      	str	r0, [r7, #12]
 800050a:	60b9      	str	r1, [r7, #8]
 800050c:	603b      	str	r3, [r7, #0]
 800050e:	4613      	mov	r3, r2
 8000510:	80fb      	strh	r3, [r7, #6]
		return 1;
 8000512:	2301      	movs	r3, #1
	}
 8000514:	4618      	mov	r0, r3
 8000516:	3714      	adds	r7, #20
 8000518:	46bd      	mov	sp, r7
 800051a:	bc80      	pop	{r7}
 800051c:	4770      	bx	lr
	...

08000520 <mqtt_net_read_cb>:

	int mqtt_net_read_cb(void *context, byte* buf, int buf_len, int timeout_ms){
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	60f8      	str	r0, [r7, #12]
 8000528:	60b9      	str	r1, [r7, #8]
 800052a:	607a      	str	r2, [r7, #4]
 800052c:	603b      	str	r3, [r7, #0]
		memcpy(buf, &local_host.data[local_host.pos], buf_len);
 800052e:	4b0d      	ldr	r3, [pc, #52]	; (8000564 <mqtt_net_read_cb+0x44>)
 8000530:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8000534:	461a      	mov	r2, r3
 8000536:	4b0b      	ldr	r3, [pc, #44]	; (8000564 <mqtt_net_read_cb+0x44>)
 8000538:	4413      	add	r3, r2
 800053a:	687a      	ldr	r2, [r7, #4]
 800053c:	4619      	mov	r1, r3
 800053e:	68b8      	ldr	r0, [r7, #8]
 8000540:	f002 f910 	bl	8002764 <memcpy>
		local_host.pos += buf_len;
 8000544:	4b07      	ldr	r3, [pc, #28]	; (8000564 <mqtt_net_read_cb+0x44>)
 8000546:	f893 2101 	ldrb.w	r2, [r3, #257]	; 0x101
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	b2db      	uxtb	r3, r3
 800054e:	4413      	add	r3, r2
 8000550:	b2da      	uxtb	r2, r3
 8000552:	4b04      	ldr	r3, [pc, #16]	; (8000564 <mqtt_net_read_cb+0x44>)
 8000554:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
		return buf_len;
 8000558:	687b      	ldr	r3, [r7, #4]
		;
	}
 800055a:	4618      	mov	r0, r3
 800055c:	3710      	adds	r7, #16
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000040 	.word	0x20000040

08000568 <mqtt_net_write_cb>:
//		l3_send_packet(broker_address, buf, buf_len);
//		return buf_len;
//	}


	int mqtt_net_write_cb(void *context, const byte* buf, int buf_len, int timeout_ms){
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	60b9      	str	r1, [r7, #8]
 8000572:	607a      	str	r2, [r7, #4]
 8000574:	603b      	str	r3, [r7, #0]
		packet_send_localhost(buf, buf_len);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	b2db      	uxtb	r3, r3
 800057a:	4619      	mov	r1, r3
 800057c:	68b8      	ldr	r0, [r7, #8]
 800057e:	f7ff ff99 	bl	80004b4 <packet_send_localhost>
	}
 8000582:	bf00      	nop
 8000584:	4618      	mov	r0, r3
 8000586:	3710      	adds	r7, #16
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <mqtt_net_disconnect_cb>:


	int mqtt_net_disconnect_cb(void *context){
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
		;
	}
 8000594:	bf00      	nop
 8000596:	4618      	mov	r0, r3
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <main>:

	MqttNet net;
int main()
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b0be      	sub	sp, #248	; 0xf8
 80005a4:	af04      	add	r7, sp, #16
  

	memset(&local_host, 0, 256);
 80005a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005aa:	2100      	movs	r1, #0
 80005ac:	487c      	ldr	r0, [pc, #496]	; (80007a0 <main+0x200>)
 80005ae:	f002 f8e4 	bl	800277a <memset>

    nrf24_init();
 80005b2:	f001 fc8c 	bl	8001ece <nrf24_init>
	nRF24_restore_defaults();
 80005b6:	f001 fc96 	bl	8001ee6 <nRF24_restore_defaults>


    
    /* Channel #2 , payload length: 4 */
    nrf24_config(2,32);
 80005ba:	2120      	movs	r1, #32
 80005bc:	2002      	movs	r0, #2
 80005be:	f001 fcef 	bl	8001fa0 <nrf24_config>
 
    /* Set the device addresses */
    nrf24_tx_address(tx_address);
 80005c2:	4878      	ldr	r0, [pc, #480]	; (80007a4 <main+0x204>)
 80005c4:	f001 fd49 	bl	800205a <nrf24_tx_address>
    nrf24_rx_address(rx_address);
 80005c8:	4877      	ldr	r0, [pc, #476]	; (80007a8 <main+0x208>)
 80005ca:	f001 fd33 	bl	8002034 <nrf24_rx_address>
    
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 80005ce:	2101      	movs	r1, #1
 80005d0:	2010      	movs	r0, #16
 80005d2:	f7ff fe9b 	bl	800030c <RCC_APB2PeriphClockCmd>


	GPIO_InitTypeDef PORT;
	PORT.GPIO_Mode = GPIO_Mode_Out_PP;
 80005d6:	2310      	movs	r3, #16
 80005d8:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	PORT.GPIO_Speed = GPIO_Speed_2MHz;
 80005dc:	2302      	movs	r3, #2
 80005de:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
	PORT.GPIO_Pin = GPIO_Pin_13;
 80005e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005e6:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
	GPIO_Init(GPIOC, &PORT);
 80005ea:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80005ee:	4619      	mov	r1, r3
 80005f0:	486e      	ldr	r0, [pc, #440]	; (80007ac <main+0x20c>)
 80005f2:	f7ff fdb3 	bl	800015c <GPIO_Init>
	GPIOC->ODR |= GPIO_Pin_13;
 80005f6:	4a6d      	ldr	r2, [pc, #436]	; (80007ac <main+0x20c>)
 80005f8:	4b6c      	ldr	r3, [pc, #432]	; (80007ac <main+0x20c>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000600:	60d3      	str	r3, [r2, #12]
    


	PORT.GPIO_Mode =  GPIO_Mode_IPU;
 8000602:	2348      	movs	r3, #72	; 0x48
 8000604:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	PORT.GPIO_Speed = GPIO_Speed_2MHz;
 8000608:	2302      	movs	r3, #2
 800060a:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
	PORT.GPIO_Pin = GPIO_Pin_11;
 800060e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000612:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
	GPIO_Init(GPIOB, &PORT);
 8000616:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800061a:	4619      	mov	r1, r3
 800061c:	4864      	ldr	r0, [pc, #400]	; (80007b0 <main+0x210>)
 800061e:	f7ff fd9d 	bl	800015c <GPIO_Init>
	GPIOC->ODR |= GPIO_Pin_13;
 8000622:	4a62      	ldr	r2, [pc, #392]	; (80007ac <main+0x20c>)
 8000624:	4b61      	ldr	r3, [pc, #388]	; (80007ac <main+0x20c>)
 8000626:	68db      	ldr	r3, [r3, #12]
 8000628:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800062c:	60d3      	str	r3, [r2, #12]


	MqttClient client;

	net.connect = mqt_net_connect_cb;
 800062e:	4b61      	ldr	r3, [pc, #388]	; (80007b4 <main+0x214>)
 8000630:	4a61      	ldr	r2, [pc, #388]	; (80007b8 <main+0x218>)
 8000632:	605a      	str	r2, [r3, #4]
	net.read = mqtt_net_read_cb;
 8000634:	4b5f      	ldr	r3, [pc, #380]	; (80007b4 <main+0x214>)
 8000636:	4a61      	ldr	r2, [pc, #388]	; (80007bc <main+0x21c>)
 8000638:	609a      	str	r2, [r3, #8]
	net.write = mqtt_net_write_cb;
 800063a:	4b5e      	ldr	r3, [pc, #376]	; (80007b4 <main+0x214>)
 800063c:	4a60      	ldr	r2, [pc, #384]	; (80007c0 <main+0x220>)
 800063e:	60da      	str	r2, [r3, #12]
	net.disconnect = mqtt_net_disconnect_cb;
 8000640:	4b5c      	ldr	r3, [pc, #368]	; (80007b4 <main+0x214>)
 8000642:	4a60      	ldr	r2, [pc, #384]	; (80007c4 <main+0x224>)
 8000644:	611a      	str	r2, [r3, #16]


	uint8_t * tx_buf = local_host.data;
 8000646:	4b56      	ldr	r3, [pc, #344]	; (80007a0 <main+0x200>)
 8000648:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	memset(tx_buf, 0, 64);
 800064c:	2240      	movs	r2, #64	; 0x40
 800064e:	2100      	movs	r1, #0
 8000650:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8000654:	f002 f891 	bl	800277a <memset>
	uint8_t tx_buf_len = 64;
 8000658:	2340      	movs	r3, #64	; 0x40
 800065a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
	uint8_t * rx_buf = local_host.data;
 800065e:	4b50      	ldr	r3, [pc, #320]	; (80007a0 <main+0x200>)
 8000660:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	int rx_buf_len =64;
 8000664:	2340      	movs	r3, #64	; 0x40
 8000666:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	int cmd_timeout_ms =500;
 800066a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800066e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	MqttClient_Init(&client, &net, mqtt_message_cb, tx_buf, tx_buf_len, rx_buf, rx_buf_len, cmd_timeout_ms);
 8000672:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8000676:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800067a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800067e:	9203      	str	r2, [sp, #12]
 8000680:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8000684:	9202      	str	r2, [sp, #8]
 8000686:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800068a:	9201      	str	r2, [sp, #4]
 800068c:	9300      	str	r3, [sp, #0]
 800068e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000692:	4a4d      	ldr	r2, [pc, #308]	; (80007c8 <main+0x228>)
 8000694:	4947      	ldr	r1, [pc, #284]	; (80007b4 <main+0x214>)
 8000696:	f000 fab9 	bl	8000c0c <MqttClient_Init>

	MqttConnect mqtt_con;
	mqtt_con.clean_session =0;
 800069a:	2300      	movs	r3, #0
 800069c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	mqtt_con.client_id = "rt1";
 80006a0:	4b4a      	ldr	r3, [pc, #296]	; (80007cc <main+0x22c>)
 80006a2:	643b      	str	r3, [r7, #64]	; 0x40
	mqtt_con.enable_lwt = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	mqtt_con.keep_alive_sec =30;
 80006aa:	231e      	movs	r3, #30
 80006ac:	877b      	strh	r3, [r7, #58]	; 0x3a
	mqtt_con.stat = MQTT_MSG_BEGIN;
 80006ae:	2300      	movs	r3, #0
 80006b0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	mqtt_con.username ="bedroomTMP1";
 80006b4:	4b46      	ldr	r3, [pc, #280]	; (80007d0 <main+0x230>)
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
	mqtt_con.password = "passw0rd";
 80006b8:	4b46      	ldr	r3, [pc, #280]	; (80007d4 <main+0x234>)
 80006ba:	653b      	str	r3, [r7, #80]	; 0x50
	MqttClient_Connect(&client, &mqtt_con);
 80006bc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80006c0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006c4:	4611      	mov	r1, r2
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 fadc 	bl	8000c84 <MqttClient_Connect>

	MqttPublish publish;

	const char* test_topic1 = "flat/livingroom/temp/1";
 80006cc:	4b42      	ldr	r3, [pc, #264]	; (80007d8 <main+0x238>)
 80006ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	const char* test_topic2 = "flat/bedroom/humidity/2";
 80006d2:	4b42      	ldr	r3, [pc, #264]	; (80007dc <main+0x23c>)
 80006d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	publish.topic_name = test_topic1;
 80006d8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80006dc:	61bb      	str	r3, [r7, #24]
	publish.topic_name_len = strlen(test_topic1);
 80006de:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80006e2:	f7ff fd33 	bl	800014c <strlen>
 80006e6:	4603      	mov	r3, r0
 80006e8:	b29b      	uxth	r3, r3
 80006ea:	83bb      	strh	r3, [r7, #28]
	uint8_t temp = 25;
 80006ec:	2319      	movs	r3, #25
 80006ee:	73fb      	strb	r3, [r7, #15]
	publish.buffer = &temp;
 80006f0:	f107 030f 	add.w	r3, r7, #15
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
	publish.total_len = sizeof(temp);
 80006f6:	2301      	movs	r3, #1
 80006f8:	623b      	str	r3, [r7, #32]
	uint16_t pck_id = 1;
 80006fa:	2301      	movs	r3, #1
 80006fc:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
	publish.packet_id = pck_id;
 8000700:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8000704:	827b      	strh	r3, [r7, #18]
	publish.qos = 1;
 8000706:	2301      	movs	r3, #1
 8000708:	757b      	strb	r3, [r7, #21]
	publish.retain = (byte) true;
 800070a:	2301      	movs	r3, #1
 800070c:	75bb      	strb	r3, [r7, #22]


    MqttTopic * topics[2];
    topics[0]->qos =1;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2201      	movs	r2, #1
 8000712:	711a      	strb	r2, [r3, #4]
    topics[0]->topic_filter = test_topic1;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800071a:	601a      	str	r2, [r3, #0]

    topics[1]->qos =1;
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	2201      	movs	r2, #1
 8000720:	711a      	strb	r2, [r3, #4]
    topics[1]->topic_filter = test_topic2;
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8000728:	601a      	str	r2, [r3, #0]



	MqttSubscribe *subscribe;
	subscribe->packet_id = pck_id;
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 8000730:	805a      	strh	r2, [r3, #2]
	uint8_t topic_count = 2;
 8000732:	2302      	movs	r3, #2
 8000734:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
	subscribe->topic_count = topic_count;
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	f897 20c9 	ldrb.w	r2, [r7, #201]	; 0xc9
 800073e:	605a      	str	r2, [r3, #4]
	subscribe->topics = topics;
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	1d3a      	adds	r2, r7, #4
 8000744:	609a      	str	r2, [r3, #8]
	MqttClient_Subscribe(&client, &subscribe);
 8000746:	463a      	mov	r2, r7
 8000748:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800074c:	4611      	mov	r1, r2
 800074e:	4618      	mov	r0, r3
 8000750:	f000 fb94 	bl	8000e7c <MqttClient_Subscribe>
	MqttClient_Publish(&client, &publish);
 8000754:	f107 0210 	add.w	r2, r7, #16
 8000758:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800075c:	4611      	mov	r1, r2
 800075e:	4618      	mov	r0, r3
 8000760:	f000 fad8 	bl	8000d14 <MqttClient_Publish>
//    		// nrf24_powerDown();
//
//       }
//

	   if(nrf24_dataReady())
 8000764:	f001 fc8b 	bl	800207e <nrf24_dataReady>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d014      	beq.n	8000798 <main+0x1f8>
		{
			//GPIOC->ODR ^=  GPIO_Pin_13;
			nrf24_getData(data_array);
 800076e:	481c      	ldr	r0, [pc, #112]	; (80007e0 <main+0x240>)
 8000770:	f001 fcb0 	bl	80020d4 <nrf24_getData>
			bool res = l3_receive_packet(data_array,layer3_buff );
 8000774:	491b      	ldr	r1, [pc, #108]	; (80007e4 <main+0x244>)
 8000776:	481a      	ldr	r0, [pc, #104]	; (80007e0 <main+0x240>)
 8000778:	f001 fb7d 	bl	8001e76 <l3_receive_packet>
 800077c:	4603      	mov	r3, r0
 800077e:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
			if (res){
 8000782:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 8000786:	2b00      	cmp	r3, #0
 8000788:	d006      	beq.n	8000798 <main+0x1f8>
				GPIOC->BRR = GPIO_Pin_13;
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <main+0x20c>)
 800078c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000790:	615a      	str	r2, [r3, #20]
				nrf24_send(data_array);
 8000792:	4813      	ldr	r0, [pc, #76]	; (80007e0 <main+0x240>)
 8000794:	f001 fcbc 	bl	8002110 <nrf24_send>
//				debug_var++;
//			}


		}
		_delay_ms(10);
 8000798:	200a      	movs	r0, #10
 800079a:	f001 fb4f 	bl	8001e3c <_delay_ms>
	   if(nrf24_dataReady())
 800079e:	e7e1      	b.n	8000764 <main+0x1c4>
 80007a0:	20000040 	.word	0x20000040
 80007a4:	20000000 	.word	0x20000000
 80007a8:	20000008 	.word	0x20000008
 80007ac:	40011000 	.word	0x40011000
 80007b0:	40010c00 	.word	0x40010c00
 80007b4:	2000002c 	.word	0x2000002c
 80007b8:	08000503 	.word	0x08000503
 80007bc:	08000521 	.word	0x08000521
 80007c0:	08000569 	.word	0x08000569
 80007c4:	0800058d 	.word	0x0800058d
 80007c8:	080004e1 	.word	0x080004e1
 80007cc:	080027a4 	.word	0x080027a4
 80007d0:	080027a8 	.word	0x080027a8
 80007d4:	080027b4 	.word	0x080027b4
 80007d8:	080027c0 	.word	0x080027c0
 80007dc:	080027d8 	.word	0x080027d8
 80007e0:	20000144 	.word	0x20000144
 80007e4:	20000740 	.word	0x20000740

080007e8 <MqttClient_HandlePayload>:
#endif

/* Private functions */
static int MqttClient_HandlePayload(MqttClient* client, MqttMessage* msg,
    int timeout_ms, void* p_decode, word16* packet_id)
{
 80007e8:	b590      	push	{r4, r7, lr}
 80007ea:	b091      	sub	sp, #68	; 0x44
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
 80007f4:	603b      	str	r3, [r7, #0]
    int rc = MQTT_CODE_SUCCESS;
 80007f6:	2300      	movs	r3, #0
 80007f8:	63fb      	str	r3, [r7, #60]	; 0x3c

    switch (msg->type)
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	791b      	ldrb	r3, [r3, #4]
 80007fe:	3b02      	subs	r3, #2
 8000800:	2b0b      	cmp	r3, #11
 8000802:	f200 817e 	bhi.w	8000b02 <MqttClient_HandlePayload+0x31a>
 8000806:	a201      	add	r2, pc, #4	; (adr r2, 800080c <MqttClient_HandlePayload+0x24>)
 8000808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800080c:	0800083d 	.word	0x0800083d
 8000810:	08000863 	.word	0x08000863
 8000814:	080009f3 	.word	0x080009f3
 8000818:	080009f3 	.word	0x080009f3
 800081c:	080009f3 	.word	0x080009f3
 8000820:	080009f3 	.word	0x080009f3
 8000824:	08000b03 	.word	0x08000b03
 8000828:	08000a83 	.word	0x08000a83
 800082c:	08000b03 	.word	0x08000b03
 8000830:	08000ab9 	.word	0x08000ab9
 8000834:	08000b03 	.word	0x08000b03
 8000838:	08000aef 	.word	0x08000aef
    {
        case MQTT_PACKET_TYPE_CONNECT_ACK:
        {
            /* Decode connect ack */
            MqttConnectAck connect_ack, *p_connect_ack = &connect_ack;
 800083c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000840:	63bb      	str	r3, [r7, #56]	; 0x38
            if (p_decode) {
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MqttClient_HandlePayload+0x64>
                p_connect_ack = (MqttConnectAck*)p_decode;
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            rc = MqttDecode_ConnectAck(client->rx_buf, client->packet.buf_len,
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	6918      	ldr	r0, [r3, #16]
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000854:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000856:	4619      	mov	r1, r3
 8000858:	f000 fe60 	bl	800151c <MqttDecode_ConnectAck>
 800085c:	63f8      	str	r0, [r7, #60]	; 0x3c
                                                                p_connect_ack);
            break;
 800085e:	bf00      	nop
 8000860:	e154      	b.n	8000b0c <MqttClient_HandlePayload+0x324>
        }
        case MQTT_PACKET_TYPE_PUBLISH:
        {
            byte msg_done;

            if (msg->buffer_new) {
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	7e1b      	ldrb	r3, [r3, #24]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d00d      	beq.n	8000886 <MqttClient_HandlePayload+0x9e>
                /* Decode publish message */
                rc = MqttDecode_Publish(client->rx_buf, client->packet.buf_len, msg);
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	6918      	ldr	r0, [r3, #16]
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000872:	68ba      	ldr	r2, [r7, #8]
 8000874:	4619      	mov	r1, r3
 8000876:	f000 ff18 	bl	80016aa <MqttDecode_Publish>
 800087a:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (rc <= 0) {
 800087c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800087e:	2b00      	cmp	r3, #0
 8000880:	dc01      	bgt.n	8000886 <MqttClient_HandlePayload+0x9e>
                    return rc;
 8000882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000884:	e143      	b.n	8000b0e <MqttClient_HandlePayload+0x326>
            }

            /* Handle packet callback and read remaining payload */
            do {
                /* Determine if message is done */
                msg_done = ((msg->buffer_pos + msg->buffer_len) >= msg->total_len) ? 1 : 0;
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	6a1a      	ldr	r2, [r3, #32]
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	69db      	ldr	r3, [r3, #28]
 800088e:	441a      	add	r2, r3
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	691b      	ldr	r3, [r3, #16]
 8000894:	429a      	cmp	r2, r3
 8000896:	bf2c      	ite	cs
 8000898:	2301      	movcs	r3, #1
 800089a:	2300      	movcc	r3, #0
 800089c:	b2db      	uxtb	r3, r3
 800089e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                if (msg->stat != MQTT_MSG_READ_PAYLOAD) {
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	2b04      	cmp	r3, #4
 80008a8:	d029      	beq.n	80008fe <MqttClient_HandlePayload+0x116>
                    /* Issue callback for new message */
                    if (client->msg_cb) {
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d022      	beq.n	80008f8 <MqttClient_HandlePayload+0x110>
                        if (!msg->buffer_new) {
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	7e1b      	ldrb	r3, [r3, #24]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d105      	bne.n	80008c6 <MqttClient_HandlePayload+0xde>
                            /* Reset topic name since valid on new message only */
                            msg->topic_name = NULL;
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
                            msg->topic_name_len = 0;
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	2200      	movs	r2, #0
 80008c4:	819a      	strh	r2, [r3, #12]
                        }
                        /* if using the temp publish message buffer,
                           then populate message context with client context */
                        if (&client->msg == msg)
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	d103      	bne.n	80008da <MqttClient_HandlePayload+0xf2>
                            msg->ctx = client->ctx;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	625a      	str	r2, [r3, #36]	; 0x24
                        rc = client->msg_cb(client, msg, msg->buffer_new, msg_done);
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	7e1a      	ldrb	r2, [r3, #24]
 80008e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008e6:	68b9      	ldr	r1, [r7, #8]
 80008e8:	68f8      	ldr	r0, [r7, #12]
 80008ea:	47a0      	blx	r4
 80008ec:	63f8      	str	r0, [r7, #60]	; 0x3c
                        if (rc != MQTT_CODE_SUCCESS) {
 80008ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MqttClient_HandlePayload+0x110>
                            return rc;
 80008f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008f6:	e10a      	b.n	8000b0e <MqttClient_HandlePayload+0x326>
                        };
                    }
                    msg->buffer_new = 0;
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	2200      	movs	r2, #0
 80008fc:	761a      	strb	r2, [r3, #24]
                }

                /* Read payload */
                if (!msg_done) {
 80008fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000902:	2b00      	cmp	r3, #0
 8000904:	d13b      	bne.n	800097e <MqttClient_HandlePayload+0x196>
                    int msg_len;

                    /* add last length to position and reset len */
                    msg->buffer_pos += msg->buffer_len;
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	6a1a      	ldr	r2, [r3, #32]
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	69db      	ldr	r3, [r3, #28]
 800090e:	441a      	add	r2, r3
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	621a      	str	r2, [r3, #32]
                    msg->buffer_len = 0;
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]

                    /* set state to reading payload */
                    msg->stat = MQTT_MSG_READ_PAYLOAD;
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	2204      	movs	r2, #4
 800091e:	701a      	strb	r2, [r3, #0]

                    msg_len = (msg->total_len - msg->buffer_pos);
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	691a      	ldr	r2, [r3, #16]
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	6a1b      	ldr	r3, [r3, #32]
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	637b      	str	r3, [r7, #52]	; 0x34
                    if (msg_len > client->rx_buf_len) {
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	695a      	ldr	r2, [r3, #20]
 8000930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000932:	429a      	cmp	r2, r3
 8000934:	da02      	bge.n	800093c <MqttClient_HandlePayload+0x154>
                        msg_len = client->rx_buf_len;
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	695b      	ldr	r3, [r3, #20]
 800093a:	637b      	str	r3, [r7, #52]	; 0x34
                    }

                    /* make sure there is something to read */
                    rc = MQTT_CODE_SUCCESS;
 800093c:	2300      	movs	r3, #0
 800093e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    if (msg_len > 0) {
 8000940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000942:	2b00      	cmp	r3, #0
 8000944:	dd16      	ble.n	8000974 <MqttClient_HandlePayload+0x18c>
                        rc = MqttSocket_Read(client, client->rx_buf, msg_len, timeout_ms);
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	6919      	ldr	r1, [r3, #16]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800094e:	68f8      	ldr	r0, [r7, #12]
 8000950:	f001 fa24 	bl	8001d9c <MqttSocket_Read>
 8000954:	63f8      	str	r0, [r7, #60]	; 0x3c
                        if (rc > 0) {
 8000956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000958:	2b00      	cmp	r3, #0
 800095a:	dd0b      	ble.n	8000974 <MqttClient_HandlePayload+0x18c>
                            /* make sure state is back to read */
                            msg->stat = MQTT_MSG_READ;
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	2203      	movs	r2, #3
 8000960:	701a      	strb	r2, [r3, #0]

                            /* Update message */
                            msg->buffer = client->rx_buf;
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	691a      	ldr	r2, [r3, #16]
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	615a      	str	r2, [r3, #20]
                            msg->buffer_len = rc;
 800096a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	61da      	str	r2, [r3, #28]
                            rc = MQTT_CODE_SUCCESS;
 8000970:	2300      	movs	r3, #0
 8000972:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }
                    if (rc < 0) {
 8000974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000976:	2b00      	cmp	r3, #0
 8000978:	da01      	bge.n	800097e <MqttClient_HandlePayload+0x196>
                        return rc;
 800097a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800097c:	e0c7      	b.n	8000b0e <MqttClient_HandlePayload+0x326>
                    }
                }
            } while (!msg_done);
 800097e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000982:	2b00      	cmp	r3, #0
 8000984:	f43f af7f 	beq.w	8000886 <MqttClient_HandlePayload+0x9e>

            /* Handle Qos */
            if (msg->qos > MQTT_QOS_0) {
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	795b      	ldrb	r3, [r3, #5]
 800098c:	2b00      	cmp	r3, #0
 800098e:	f000 80ba 	beq.w	8000b06 <MqttClient_HandlePayload+0x31e>
                MqttPublishResp publish_resp;
                MqttPacketType type;

                *packet_id = msg->packet_id;
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	885a      	ldrh	r2, [r3, #2]
 8000996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000998:	801a      	strh	r2, [r3, #0]

                /* Determine packet type to write */
                type = (msg->qos == MQTT_QOS_1) ?
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	795b      	ldrb	r3, [r3, #5]
                    MQTT_PACKET_TYPE_PUBLISH_ACK :
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d101      	bne.n	80009a6 <MqttClient_HandlePayload+0x1be>
 80009a2:	2304      	movs	r3, #4
 80009a4:	e000      	b.n	80009a8 <MqttClient_HandlePayload+0x1c0>
 80009a6:	2305      	movs	r3, #5
                type = (msg->qos == MQTT_QOS_1) ?
 80009a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    MQTT_PACKET_TYPE_PUBLISH_REC;
                publish_resp.packet_id = msg->packet_id;
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	885b      	ldrh	r3, [r3, #2]
 80009b0:	843b      	strh	r3, [r7, #32]

                /* Encode publish response */
                rc = MqttEncode_PublishResp(client->tx_buf,
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	6898      	ldr	r0, [r3, #8]
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	68d9      	ldr	r1, [r3, #12]
 80009ba:	f107 0320 	add.w	r3, r7, #32
 80009be:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80009c2:	f000 fee9 	bl	8001798 <MqttEncode_PublishResp>
 80009c6:	63f8      	str	r0, [r7, #60]	; 0x3c
                                    client->tx_buf_len, type, &publish_resp);
                if (rc <= 0) {
 80009c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	dc01      	bgt.n	80009d2 <MqttClient_HandlePayload+0x1ea>
                    return rc;
 80009ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009d0:	e09d      	b.n	8000b0e <MqttClient_HandlePayload+0x326>
                }
                client->packet.buf_len = rc;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80009d6:	629a      	str	r2, [r3, #40]	; 0x28

                /* Send packet */
                msg->stat = MQTT_MSG_BEGIN;
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]
                rc = MqttPacket_Write(client, client->tx_buf,
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	6899      	ldr	r1, [r3, #8]
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009e6:	461a      	mov	r2, r3
 80009e8:	68f8      	ldr	r0, [r7, #12]
 80009ea:	f001 f87a 	bl	8001ae2 <MqttPacket_Write>
 80009ee:	63f8      	str	r0, [r7, #60]	; 0x3c
                                                    client->packet.buf_len);
            }
            break;
 80009f0:	e089      	b.n	8000b06 <MqttClient_HandlePayload+0x31e>
        case MQTT_PACKET_TYPE_PUBLISH_ACK:
        case MQTT_PACKET_TYPE_PUBLISH_REC:
        case MQTT_PACKET_TYPE_PUBLISH_REL:
        case MQTT_PACKET_TYPE_PUBLISH_COMP:
        {
            MqttPublishResp publish_resp, *p_publish_resp = &publish_resp;
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	633b      	str	r3, [r7, #48]	; 0x30
            if (p_decode) {
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MqttClient_HandlePayload+0x21a>
                p_publish_resp = (MqttPublishResp*)p_decode;
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* Decode publish response message */
            rc = MqttDecode_PublishResp(client->rx_buf, client->packet.buf_len,
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	6918      	ldr	r0, [r3, #16]
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	791a      	ldrb	r2, [r3, #4]
 8000a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a10:	f000 ff08 	bl	8001824 <MqttDecode_PublishResp>
 8000a14:	63f8      	str	r0, [r7, #60]	; 0x3c
                msg->type, p_publish_resp);
            if (rc <= 0) {
 8000a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	dc01      	bgt.n	8000a20 <MqttClient_HandlePayload+0x238>
                return rc;
 8000a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a1e:	e076      	b.n	8000b0e <MqttClient_HandlePayload+0x326>
            }
            *packet_id = p_publish_resp->packet_id;
 8000a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a22:	881a      	ldrh	r2, [r3, #0]
 8000a24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a26:	801a      	strh	r2, [r3, #0]

            /* If Qos then send response */
            if (msg->type == MQTT_PACKET_TYPE_PUBLISH_REC ||
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	791b      	ldrb	r3, [r3, #4]
 8000a2c:	2b05      	cmp	r3, #5
 8000a2e:	d003      	beq.n	8000a38 <MqttClient_HandlePayload+0x250>
                msg->type == MQTT_PACKET_TYPE_PUBLISH_REL) {
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	791b      	ldrb	r3, [r3, #4]
            if (msg->type == MQTT_PACKET_TYPE_PUBLISH_REC ||
 8000a34:	2b06      	cmp	r3, #6
 8000a36:	d168      	bne.n	8000b0a <MqttClient_HandlePayload+0x322>

                /* Encode publish response */
                publish_resp.packet_id = p_publish_resp->packet_id;
 8000a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a3a:	881b      	ldrh	r3, [r3, #0]
 8000a3c:	83bb      	strh	r3, [r7, #28]
                rc = MqttEncode_PublishResp(client->tx_buf,
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	6898      	ldr	r0, [r3, #8]
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	68d9      	ldr	r1, [r3, #12]
                    client->tx_buf_len, msg->type+1, &publish_resp);
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	791b      	ldrb	r3, [r3, #4]
                rc = MqttEncode_PublishResp(client->tx_buf,
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	b2da      	uxtb	r2, r3
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	f000 fea1 	bl	8001798 <MqttEncode_PublishResp>
 8000a56:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (rc <= 0) {
 8000a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	dc01      	bgt.n	8000a62 <MqttClient_HandlePayload+0x27a>
                    return rc;
 8000a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a60:	e055      	b.n	8000b0e <MqttClient_HandlePayload+0x326>
                }
                client->packet.buf_len = rc;
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000a66:	629a      	str	r2, [r3, #40]	; 0x28

                /* Send packet */
                msg->stat = MQTT_MSG_BEGIN;
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	701a      	strb	r2, [r3, #0]
                rc = MqttPacket_Write(client, client->tx_buf, client->packet.buf_len);
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	6899      	ldr	r1, [r3, #8]
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a76:	461a      	mov	r2, r3
 8000a78:	68f8      	ldr	r0, [r7, #12]
 8000a7a:	f001 f832 	bl	8001ae2 <MqttPacket_Write>
 8000a7e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000a80:	e044      	b.n	8000b0c <MqttClient_HandlePayload+0x324>
        }
        case MQTT_PACKET_TYPE_SUBSCRIBE_ACK:
        {
            /* Decode subscribe ack */
            MqttSubscribeAck subscribe_ack;
            MqttSubscribeAck *p_subscribe_ack = &subscribe_ack;
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (p_decode) {
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MqttClient_HandlePayload+0x2aa>
                p_subscribe_ack = (MqttSubscribeAck*)p_decode;
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            rc = MqttDecode_SubscribeAck(client->rx_buf, client->packet.buf_len,
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	6918      	ldr	r0, [r3, #16]
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f000 ff7b 	bl	8001998 <MqttDecode_SubscribeAck>
 8000aa2:	63f8      	str	r0, [r7, #60]	; 0x3c
                p_subscribe_ack);
            if (rc <= 0) {
 8000aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	dc01      	bgt.n	8000aae <MqttClient_HandlePayload+0x2c6>
                return rc;
 8000aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000aac:	e02f      	b.n	8000b0e <MqttClient_HandlePayload+0x326>
            }
            *packet_id = p_subscribe_ack->packet_id;
 8000aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ab0:	881a      	ldrh	r2, [r3, #0]
 8000ab2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ab4:	801a      	strh	r2, [r3, #0]
 8000ab6:	e029      	b.n	8000b0c <MqttClient_HandlePayload+0x324>
        }
        case MQTT_PACKET_TYPE_UNSUBSCRIBE_ACK:
        {
            /* Decode unsubscribe ack */
            MqttUnsubscribeAck unsubscribe_ack;
            MqttUnsubscribeAck *p_unsubscribe_ack = &unsubscribe_ack;
 8000ab8:	f107 0310 	add.w	r3, r7, #16
 8000abc:	62bb      	str	r3, [r7, #40]	; 0x28

            if (p_decode) {
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MqttClient_HandlePayload+0x2e0>
                p_unsubscribe_ack = (MqttUnsubscribeAck*)p_decode;
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            rc = MqttDecode_UnsubscribeAck(client->rx_buf, client->packet.buf_len,
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	6918      	ldr	r0, [r3, #16]
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	f000 ffa0 	bl	8001a18 <MqttDecode_UnsubscribeAck>
 8000ad8:	63f8      	str	r0, [r7, #60]	; 0x3c
                p_unsubscribe_ack);
            if (rc <= 0) {
 8000ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	dc01      	bgt.n	8000ae4 <MqttClient_HandlePayload+0x2fc>
                return rc;
 8000ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ae2:	e014      	b.n	8000b0e <MqttClient_HandlePayload+0x326>
            }
            *packet_id = p_unsubscribe_ack->packet_id;
 8000ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ae6:	881a      	ldrh	r2, [r3, #0]
 8000ae8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000aea:	801a      	strh	r2, [r3, #0]
 8000aec:	e00e      	b.n	8000b0c <MqttClient_HandlePayload+0x324>
            break;
        }
        case MQTT_PACKET_TYPE_PING_RESP:
        {
            /* Decode ping */
            rc = MqttDecode_Ping(client->rx_buf, client->packet.buf_len);
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	691a      	ldr	r2, [r3, #16]
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000af6:	4619      	mov	r1, r3
 8000af8:	4610      	mov	r0, r2
 8000afa:	f000 ffca 	bl	8001a92 <MqttDecode_Ping>
 8000afe:	63f8      	str	r0, [r7, #60]	; 0x3c
            break;
 8000b00:	e004      	b.n	8000b0c <MqttClient_HandlePayload+0x324>
            /* Other types are server side only, ignore */
        #ifdef WOLFMQTT_DEBUG_CLIENT
            PRINTF("MqttClient_WaitMessage: Invalid client packet type %u!",
                msg->type);
        #endif
            break;
 8000b02:	bf00      	nop
 8000b04:	e002      	b.n	8000b0c <MqttClient_HandlePayload+0x324>
            break;
 8000b06:	bf00      	nop
 8000b08:	e000      	b.n	8000b0c <MqttClient_HandlePayload+0x324>
            break;
 8000b0a:	bf00      	nop
        }
    } /* switch (msg->type) */

    return rc;
 8000b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3744      	adds	r7, #68	; 0x44
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd90      	pop	{r4, r7, pc}
 8000b16:	bf00      	nop

08000b18 <MqttClient_WaitType>:

static int MqttClient_WaitType(MqttClient *client, MqttMessage* msg,
    int timeout_ms, byte wait_type, word16 wait_packet_id, void* p_decode)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	; 0x28
 8000b1c:	af02      	add	r7, sp, #8
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
 8000b24:	70fb      	strb	r3, [r7, #3]
    int rc;
    word16 packet_id = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	82fb      	strh	r3, [r7, #22]

wait_again:

    switch (msg->stat)
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2b04      	cmp	r3, #4
 8000b30:	d85e      	bhi.n	8000bf0 <MqttClient_WaitType+0xd8>
 8000b32:	a201      	add	r2, pc, #4	; (adr r2, 8000b38 <MqttClient_WaitType+0x20>)
 8000b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b38:	08000b4d 	.word	0x08000b4d
 8000b3c:	08000b53 	.word	0x08000b53
 8000b40:	08000bf1 	.word	0x08000bf1
 8000b44:	08000ba9 	.word	0x08000ba9
 8000b48:	08000ba9 	.word	0x08000ba9
    {
        case MQTT_MSG_BEGIN:
        {
            /* reset the packet state */
            client->packet.stat = MQTT_PK_BEGIN;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	2200      	movs	r2, #0
 8000b50:	771a      	strb	r2, [r3, #28]
        case MQTT_MSG_WAIT:
        {
            MqttPacket* header;

            /* Wait for packet */
            rc = MqttPacket_Read(client, client->rx_buf, client->rx_buf_len, timeout_ms);
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	6919      	ldr	r1, [r3, #16]
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	695a      	ldr	r2, [r3, #20]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	68f8      	ldr	r0, [r7, #12]
 8000b5e:	f000 ffd3 	bl	8001b08 <MqttPacket_Read>
 8000b62:	61f8      	str	r0, [r7, #28]
            if (rc <= 0) {
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	dc01      	bgt.n	8000b6e <MqttClient_WaitType+0x56>
                return rc;
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	e049      	b.n	8000c02 <MqttClient_WaitType+0xea>
            }

            msg->stat = MQTT_MSG_WAIT;
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	2201      	movs	r2, #1
 8000b72:	701a      	strb	r2, [r3, #0]
            client->packet.buf_len = rc;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	69fa      	ldr	r2, [r7, #28]
 8000b78:	629a      	str	r2, [r3, #40]	; 0x28

            /* Determine packet type */
            header = (MqttPacket*)client->rx_buf;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	691b      	ldr	r3, [r3, #16]
 8000b7e:	61bb      	str	r3, [r7, #24]
            msg->type = MQTT_PACKET_TYPE_GET(header->type_flags);
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	091b      	lsrs	r3, r3, #4
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	711a      	strb	r2, [r3, #4]
            msg->qos = (MqttQoS)MQTT_PACKET_FLAGS_GET_QOS(header->type_flags);
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	105b      	asrs	r3, r3, #1
 8000b92:	f003 0303 	and.w	r3, r3, #3
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	715a      	strb	r2, [r3, #5]
            msg->buffer_new = 1;
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	761a      	strb	r2, [r3, #24]
        #ifdef WOLFMQTT_DEBUG_CLIENT
            PRINTF("Read Packet: Len %d, Type %d, Qos %d",
                client->packet.buf_len, msg->type, msg->qos);
        #endif

            msg->stat = MQTT_MSG_READ;
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	2203      	movs	r2, #3
 8000ba6:	701a      	strb	r2, [r3, #0]
        }

        case MQTT_MSG_READ:
        case MQTT_MSG_READ_PAYLOAD:
        {
            rc = MqttClient_HandlePayload(client, msg, timeout_ms, p_decode,
 8000ba8:	f107 0316 	add.w	r3, r7, #22
 8000bac:	9300      	str	r3, [sp, #0]
 8000bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	68b9      	ldr	r1, [r7, #8]
 8000bb4:	68f8      	ldr	r0, [r7, #12]
 8000bb6:	f7ff fe17 	bl	80007e8 <MqttClient_HandlePayload>
 8000bba:	61f8      	str	r0, [r7, #28]
                                                                &packet_id);
            if (rc < 0) {
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	da01      	bge.n	8000bc6 <MqttClient_WaitType+0xae>
                return rc;
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	e01d      	b.n	8000c02 <MqttClient_WaitType+0xea>
            }
            rc = MQTT_CODE_SUCCESS;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]

            /* Check for type and packet id */
            if (wait_type < MQTT_PACKET_TYPE_MAX) {
 8000bca:	78fb      	ldrb	r3, [r7, #3]
 8000bcc:	2b0e      	cmp	r3, #14
 8000bce:	d813      	bhi.n	8000bf8 <MqttClient_WaitType+0xe0>
                if (wait_type == msg->type) {
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	791b      	ldrb	r3, [r3, #4]
 8000bd4:	78fa      	ldrb	r2, [r7, #3]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d106      	bne.n	8000be8 <MqttClient_WaitType+0xd0>
                    if (wait_packet_id == 0 || wait_packet_id == packet_id) {
 8000bda:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d00c      	beq.n	8000bfa <MqttClient_WaitType+0xe2>
 8000be0:	8afb      	ldrh	r3, [r7, #22]
 8000be2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d008      	beq.n	8000bfa <MqttClient_WaitType+0xe2>
                        /* We found the packet type and id */
                        break;
                    }
                }

                msg->stat = MQTT_MSG_BEGIN;
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	2200      	movs	r2, #0
 8000bec:	701a      	strb	r2, [r3, #0]
                goto wait_again;
 8000bee:	e79c      	b.n	8000b2a <MqttClient_WaitType+0x12>
        {
        #ifdef WOLFMQTT_DEBUG_CLIENT
            PRINTF("MqttClient_WaitType: Invalid state %d!",
                msg->stat);
        #endif
            rc = MQTT_CODE_ERROR_STAT;
 8000bf0:	f06f 0309 	mvn.w	r3, #9
 8000bf4:	61fb      	str	r3, [r7, #28]
            break;
 8000bf6:	e000      	b.n	8000bfa <MqttClient_WaitType+0xe2>
            break;
 8000bf8:	bf00      	nop
        }
    } /* switch (msg->stat) */

    /* reset state */
    msg->stat = MQTT_MSG_BEGIN;
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	701a      	strb	r2, [r3, #0]

    return rc;
 8000c00:	69fb      	ldr	r3, [r7, #28]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3720      	adds	r7, #32
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop

08000c0c <MqttClient_Init>:
int MqttClient_Init(MqttClient *client, MqttNet* net,
    MqttMsgCb msg_cb,
    byte* tx_buf, int tx_buf_len,
    byte* rx_buf, int rx_buf_len,
    int cmd_timeout_ms)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
 8000c18:	603b      	str	r3, [r7, #0]
    int rc = MQTT_CODE_SUCCESS;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]

    /* Check arguments */
    if (client == NULL ||
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d00b      	beq.n	8000c3c <MqttClient_Init+0x30>
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d008      	beq.n	8000c3c <MqttClient_Init+0x30>
        tx_buf == NULL || tx_buf_len <= 0 ||
 8000c2a:	6a3b      	ldr	r3, [r7, #32]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	dd05      	ble.n	8000c3c <MqttClient_Init+0x30>
 8000c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d002      	beq.n	8000c3c <MqttClient_Init+0x30>
        rx_buf == NULL || rx_buf_len <= 0) {
 8000c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	dc02      	bgt.n	8000c42 <MqttClient_Init+0x36>
        return MQTT_CODE_ERROR_BAD_ARG;
 8000c3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c40:	e01c      	b.n	8000c7c <MqttClient_Init+0x70>
    }

    /* Initialize the client structure to zero */
    XMEMSET(client, 0, sizeof(MqttClient));
 8000c42:	226c      	movs	r2, #108	; 0x6c
 8000c44:	2100      	movs	r1, #0
 8000c46:	68f8      	ldr	r0, [r7, #12]
 8000c48:	f001 fd97 	bl	800277a <memset>

    /* Setup client structure */
    client->msg_cb = msg_cb;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	63da      	str	r2, [r3, #60]	; 0x3c
    client->tx_buf = tx_buf;
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	683a      	ldr	r2, [r7, #0]
 8000c56:	609a      	str	r2, [r3, #8]
    client->tx_buf_len = tx_buf_len;
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	6a3a      	ldr	r2, [r7, #32]
 8000c5c:	60da      	str	r2, [r3, #12]
    client->rx_buf = rx_buf;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c62:	611a      	str	r2, [r3, #16]
    client->rx_buf_len = rx_buf_len;
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c68:	615a      	str	r2, [r3, #20]
    client->cmd_timeout_ms = cmd_timeout_ms;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c6e:	605a      	str	r2, [r3, #4]

    /* Init socket */
    rc = MqttSocket_Init(client, net);
 8000c70:	68b9      	ldr	r1, [r7, #8]
 8000c72:	68f8      	ldr	r0, [r7, #12]
 8000c74:	f000 ffe5 	bl	8001c42 <MqttSocket_Init>
 8000c78:	6178      	str	r0, [r7, #20]

    return rc;
 8000c7a:	697b      	ldr	r3, [r7, #20]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3718      	adds	r7, #24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <MqttClient_Connect>:

int MqttClient_Connect(MqttClient *client, MqttConnect *connect)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af02      	add	r7, sp, #8
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
    int rc, len;

    /* Validate required arguments */
    if (client == NULL || connect == NULL) {
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d002      	beq.n	8000c9a <MqttClient_Connect+0x16>
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d102      	bne.n	8000ca0 <MqttClient_Connect+0x1c>
        return MQTT_CODE_ERROR_BAD_ARG;
 8000c9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c9e:	e034      	b.n	8000d0a <MqttClient_Connect+0x86>
    }

    if (connect->stat == MQTT_MSG_BEGIN) {
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d120      	bne.n	8000cea <MqttClient_Connect+0x66>

        /* Encode the connect packet */
        rc = MqttEncode_Connect(client->tx_buf, client->tx_buf_len, connect);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6898      	ldr	r0, [r3, #8]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	683a      	ldr	r2, [r7, #0]
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	f000 fb02 	bl	80012bc <MqttEncode_Connect>
 8000cb8:	60f8      	str	r0, [r7, #12]
        if (rc <= 0) {
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	dc01      	bgt.n	8000cc4 <MqttClient_Connect+0x40>
            return rc;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	e022      	b.n	8000d0a <MqttClient_Connect+0x86>
        }
        len = rc;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	60bb      	str	r3, [r7, #8]

        /* Send connect packet */
        rc = MqttPacket_Write(client, client->tx_buf, len);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	68ba      	ldr	r2, [r7, #8]
 8000cce:	4619      	mov	r1, r3
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f000 ff06 	bl	8001ae2 <MqttPacket_Write>
 8000cd6:	60f8      	str	r0, [r7, #12]
        if (rc != len) {
 8000cd8:	68fa      	ldr	r2, [r7, #12]
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d001      	beq.n	8000ce4 <MqttClient_Connect+0x60>
            return rc;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	e012      	b.n	8000d0a <MqttClient_Connect+0x86>
        }
        connect->stat = MQTT_MSG_WAIT;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	701a      	strb	r2, [r3, #0]
	broker_decode_connect(&broker, local_host.data, &stat);
	broker_send_conn_ack(&broker, &stat);
*/

    /* Wait for connect ack packet */
    rc = MqttClient_WaitType(client, &client->msg, client->cmd_timeout_ms,
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	685a      	ldr	r2, [r3, #4]
        MQTT_PACKET_TYPE_CONNECT_ACK, 0, &connect->ack);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	331c      	adds	r3, #28
    rc = MqttClient_WaitType(client, &client->msg, client->cmd_timeout_ms,
 8000cf8:	9301      	str	r3, [sp, #4]
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	9300      	str	r3, [sp, #0]
 8000cfe:	2302      	movs	r3, #2
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff ff09 	bl	8000b18 <MqttClient_WaitType>
 8000d06:	60f8      	str	r0, [r7, #12]

    return rc;
 8000d08:	68fb      	ldr	r3, [r7, #12]
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <MqttClient_Publish>:

int MqttClient_Publish(MqttClient *client, MqttPublish *publish)
{
 8000d14:	b590      	push	{r4, r7, lr}
 8000d16:	b087      	sub	sp, #28
 8000d18:	af02      	add	r7, sp, #8
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
    int rc = MQTT_CODE_SUCCESS;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]

    /* Validate required arguments */
    if (client == NULL || publish == NULL) {
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d002      	beq.n	8000d2e <MqttClient_Publish+0x1a>
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d102      	bne.n	8000d34 <MqttClient_Publish+0x20>
        return MQTT_CODE_ERROR_BAD_ARG;
 8000d2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d32:	e09e      	b.n	8000e72 <MqttClient_Publish+0x15e>
    }

    switch (publish->stat)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b04      	cmp	r3, #4
 8000d3a:	f200 8099 	bhi.w	8000e70 <MqttClient_Publish+0x15c>
 8000d3e:	a201      	add	r2, pc, #4	; (adr r2, 8000d44 <MqttClient_Publish+0x30>)
 8000d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d44:	08000d59 	.word	0x08000d59
 8000d48:	08000e25 	.word	0x08000e25
 8000d4c:	08000d7b 	.word	0x08000d7b
 8000d50:	08000e67 	.word	0x08000e67
 8000d54:	08000e67 	.word	0x08000e67
    {
        case MQTT_MSG_BEGIN:
        {
            /* Encode the publish packet */
            rc = MqttEncode_Publish(client->tx_buf, client->tx_buf_len, publish);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6898      	ldr	r0, [r3, #8]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	683a      	ldr	r2, [r7, #0]
 8000d62:	4619      	mov	r1, r3
 8000d64:	f000 fc12 	bl	800158c <MqttEncode_Publish>
 8000d68:	60f8      	str	r0, [r7, #12]
            if (rc <= 0) {
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	dc01      	bgt.n	8000d74 <MqttClient_Publish+0x60>
                return rc;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	e07e      	b.n	8000e72 <MqttClient_Publish+0x15e>
            }

            client->write.len = rc;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	639a      	str	r2, [r3, #56]	; 0x38
            FALL_THROUGH;
        }

        case MQTT_MSG_WRITE:
        {
            publish->stat = MQTT_MSG_WRITE;
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	2202      	movs	r2, #2
 8000d7e:	701a      	strb	r2, [r3, #0]

            /* Send packet and payload */
            do {
                rc = MqttPacket_Write(client, client->tx_buf, client->write.len);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6899      	ldr	r1, [r3, #8]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d88:	461a      	mov	r2, r3
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f000 fea9 	bl	8001ae2 <MqttPacket_Write>
 8000d90:	60f8      	str	r0, [r7, #12]
                if (rc < 0) {
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	da01      	bge.n	8000d9c <MqttClient_Publish+0x88>
                    return rc;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	e06a      	b.n	8000e72 <MqttClient_Publish+0x15e>
                }

                publish->buffer_pos += publish->buffer_len;
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	6a1a      	ldr	r2, [r3, #32]
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	69db      	ldr	r3, [r3, #28]
 8000da4:	441a      	add	r2, r3
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	621a      	str	r2, [r3, #32]
                publish->buffer_len = 0;
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	2200      	movs	r2, #0
 8000dae:	61da      	str	r2, [r3, #28]

                /* Check if we are done sending publish message */
                if (publish->buffer_pos >= publish->total_len) {
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	6a1a      	ldr	r2, [r3, #32]
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	691b      	ldr	r3, [r3, #16]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d302      	bcc.n	8000dc2 <MqttClient_Publish+0xae>
                    rc = MQTT_CODE_SUCCESS;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60fb      	str	r3, [r7, #12]
                    break;
 8000dc0:	e028      	b.n	8000e14 <MqttClient_Publish+0x100>
                }

                /* Build packet payload to send */
                client->write.len = (publish->total_len - publish->buffer_pos);
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	691a      	ldr	r2, [r3, #16]
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	6a1b      	ldr	r3, [r3, #32]
 8000dca:	1ad3      	subs	r3, r2, r3
 8000dcc:	461a      	mov	r2, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	639a      	str	r2, [r3, #56]	; 0x38
                if (client->write.len > client->tx_buf_len) {
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	dd03      	ble.n	8000de6 <MqttClient_Publish+0xd2>
                    client->write.len = client->tx_buf_len;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	68da      	ldr	r2, [r3, #12]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	639a      	str	r2, [r3, #56]	; 0x38
                }
                publish->buffer_len = client->write.len;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dea:	461a      	mov	r2, r3
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	61da      	str	r2, [r3, #28]
                XMEMCPY(client->tx_buf, &publish->buffer[publish->buffer_pos],
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6898      	ldr	r0, [r3, #8]
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	695a      	ldr	r2, [r3, #20]
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	6a1b      	ldr	r3, [r3, #32]
 8000dfc:	18d1      	adds	r1, r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e02:	461a      	mov	r2, r3
 8000e04:	f001 fcae 	bl	8002764 <memcpy>

            #ifdef WOLFMQTT_NONBLOCK
                return MQTT_CODE_CONTINUE;
            #endif

            } while (publish->buffer_pos < publish->total_len);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	6a1a      	ldr	r2, [r3, #32]
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	691b      	ldr	r3, [r3, #16]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d3b5      	bcc.n	8000d80 <MqttClient_Publish+0x6c>

            /* if not expecting a reply, the reset state and exit */
            if (publish->qos == MQTT_QOS_0) {
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	795b      	ldrb	r3, [r3, #5]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d103      	bne.n	8000e24 <MqttClient_Publish+0x110>
                publish->stat = MQTT_MSG_BEGIN;
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	701a      	strb	r2, [r3, #0]
                break;
 8000e22:	e025      	b.n	8000e70 <MqttClient_Publish+0x15c>
            FALL_THROUGH;
        }

        case MQTT_MSG_WAIT:
        {
            publish->stat = MQTT_MSG_WAIT;
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	2201      	movs	r2, #1
 8000e28:	701a      	strb	r2, [r3, #0]

            /* Handle QoS */
            if (publish->qos > MQTT_QOS_0) {
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	795b      	ldrb	r3, [r3, #5]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d01d      	beq.n	8000e6e <MqttClient_Publish+0x15a>
                /* Determine packet type to wait for */
                MqttPacketType type = (publish->qos == MQTT_QOS_1) ?
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	795b      	ldrb	r3, [r3, #5]
                    MQTT_PACKET_TYPE_PUBLISH_ACK : MQTT_PACKET_TYPE_PUBLISH_COMP;
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d101      	bne.n	8000e3e <MqttClient_Publish+0x12a>
 8000e3a:	2304      	movs	r3, #4
 8000e3c:	e000      	b.n	8000e40 <MqttClient_Publish+0x12c>
 8000e3e:	2307      	movs	r3, #7
                MqttPacketType type = (publish->qos == MQTT_QOS_1) ?
 8000e40:	72fb      	strb	r3, [r7, #11]

                /* Wait for publish response packet */
                rc = MqttClient_WaitType(client, &client->msg,
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6858      	ldr	r0, [r3, #4]
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	885b      	ldrh	r3, [r3, #2]
 8000e50:	7afc      	ldrb	r4, [r7, #11]
 8000e52:	2200      	movs	r2, #0
 8000e54:	9201      	str	r2, [sp, #4]
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	4623      	mov	r3, r4
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f7ff fe5b 	bl	8000b18 <MqttClient_WaitType>
 8000e62:	60f8      	str	r0, [r7, #12]
                    client->cmd_timeout_ms, type, publish->packet_id, NULL);
            }

            break;
 8000e64:	e003      	b.n	8000e6e <MqttClient_Publish+0x15a>
        case MQTT_MSG_READ_PAYLOAD:
        #ifdef WOLFMQTT_DEBUG_CLIENT
            PRINTF("MqttClient_Publish: Invalid state %d!",
                publish->stat);
        #endif
            rc = MQTT_CODE_ERROR_STAT;
 8000e66:	f06f 0309 	mvn.w	r3, #9
 8000e6a:	60fb      	str	r3, [r7, #12]
            break;
 8000e6c:	e000      	b.n	8000e70 <MqttClient_Publish+0x15c>
            break;
 8000e6e:	bf00      	nop
    } /* switch (publish->stat) */

    return rc;
 8000e70:	68fb      	ldr	r3, [r7, #12]
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd90      	pop	{r4, r7, pc}
 8000e7a:	bf00      	nop

08000e7c <MqttClient_Subscribe>:

int MqttClient_Subscribe(MqttClient *client, MqttSubscribe *subscribe)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	; 0x28
 8000e80:	af02      	add	r7, sp, #8
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
    int rc, len, i;
    MqttSubscribeAck subscribe_ack;
    MqttTopic* topic;

    /* Validate required arguments */
    if (client == NULL || subscribe == NULL) {
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d002      	beq.n	8000e92 <MqttClient_Subscribe+0x16>
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d102      	bne.n	8000e98 <MqttClient_Subscribe+0x1c>
        return MQTT_CODE_ERROR_BAD_ARG;
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e96:	e050      	b.n	8000f3a <MqttClient_Subscribe+0xbe>
    }

    if (subscribe->stat == MQTT_MSG_BEGIN) {
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d120      	bne.n	8000ee2 <MqttClient_Subscribe+0x66>
        /* Encode the subscribe packet */
        rc = MqttEncode_Subscribe(client->tx_buf, client->tx_buf_len, subscribe);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6898      	ldr	r0, [r3, #8]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	683a      	ldr	r2, [r7, #0]
 8000eaa:	4619      	mov	r1, r3
 8000eac:	f000 fcf7 	bl	800189e <MqttEncode_Subscribe>
 8000eb0:	61b8      	str	r0, [r7, #24]
        if (rc <= 0) { return rc; }
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	dc01      	bgt.n	8000ebc <MqttClient_Subscribe+0x40>
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	e03e      	b.n	8000f3a <MqttClient_Subscribe+0xbe>
        len = rc;
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	617b      	str	r3, [r7, #20]

        /* Send subscribe packet */
        rc = MqttPacket_Write(client, client->tx_buf, len);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	697a      	ldr	r2, [r7, #20]
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f000 fe0a 	bl	8001ae2 <MqttPacket_Write>
 8000ece:	61b8      	str	r0, [r7, #24]
        if (rc != len) { return rc; }
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d001      	beq.n	8000edc <MqttClient_Subscribe+0x60>
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	e02e      	b.n	8000f3a <MqttClient_Subscribe+0xbe>

        subscribe->stat = MQTT_MSG_WAIT;
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	701a      	strb	r2, [r3, #0]
    }

    /* Wait for subscribe ack packet */
    rc = MqttClient_WaitType(client, &client->msg, client->cmd_timeout_ms,
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6858      	ldr	r0, [r3, #4]
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	885b      	ldrh	r3, [r3, #2]
 8000ef0:	f107 0208 	add.w	r2, r7, #8
 8000ef4:	9201      	str	r2, [sp, #4]
 8000ef6:	9300      	str	r3, [sp, #0]
 8000ef8:	2309      	movs	r3, #9
 8000efa:	4602      	mov	r2, r0
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f7ff fe0b 	bl	8000b18 <MqttClient_WaitType>
 8000f02:	61b8      	str	r0, [r7, #24]
        MQTT_PACKET_TYPE_SUBSCRIBE_ACK, subscribe->packet_id, &subscribe_ack);

    /* Populate return codes */
    if (rc == MQTT_CODE_SUCCESS) {
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d116      	bne.n	8000f38 <MqttClient_Subscribe+0xbc>
        for (i = 0; i < subscribe->topic_count; i++) {
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
 8000f0e:	e00e      	b.n	8000f2e <MqttClient_Subscribe+0xb2>
            topic = &subscribe->topics[i];
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	4413      	add	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
            topic->return_code = subscribe_ack.return_codes[i];
 8000f1c:	68fa      	ldr	r2, [r7, #12]
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	4413      	add	r3, r2
 8000f22:	781a      	ldrb	r2, [r3, #0]
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	715a      	strb	r2, [r3, #5]
        for (i = 0; i < subscribe->topic_count; i++) {
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	61fb      	str	r3, [r7, #28]
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685a      	ldr	r2, [r3, #4]
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	dceb      	bgt.n	8000f10 <MqttClient_Subscribe+0x94>
        }
    }

    return rc;
 8000f38:	69bb      	ldr	r3, [r7, #24]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3720      	adds	r7, #32
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <MqttEncode_FixedHeader>:
#include "mqtt_client.h"

/* Positive return value is header length, zero or negative indicates error */
static int MqttEncode_FixedHeader(byte *tx_buf, int tx_buf_len, int remain_len,
    byte type, byte retain, byte qos, byte duplicate)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b086      	sub	sp, #24
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	60f8      	str	r0, [r7, #12]
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
 8000f4e:	70fb      	strb	r3, [r7, #3]
    int header_len;
    MqttPacket* header = (MqttPacket*)tx_buf;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	617b      	str	r3, [r7, #20]

    /* Encode fixed header */
    header->type_flags = MQTT_PACKET_TYPE_SET(type) | MQTT_PACKET_FLAGS_SET(0);
 8000f54:	78fb      	ldrb	r3, [r7, #3]
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	701a      	strb	r2, [r3, #0]
    if (retain) {
 8000f5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d006      	beq.n	8000f74 <MqttEncode_FixedHeader+0x32>
        header->type_flags |= MQTT_PACKET_FLAGS_SET(MQTT_PACKET_FLAG_RETAIN);
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	f043 0301 	orr.w	r3, r3, #1
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	701a      	strb	r2, [r3, #0]
    }
    if (qos) {
 8000f74:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d00e      	beq.n	8000f9a <MqttEncode_FixedHeader+0x58>
        header->type_flags |= MQTT_PACKET_FLAGS_SET_QOS(qos);
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	b25a      	sxtb	r2, r3
 8000f82:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	b25b      	sxtb	r3, r3
 8000f8a:	f003 0306 	and.w	r3, r3, #6
 8000f8e:	b25b      	sxtb	r3, r3
 8000f90:	4313      	orrs	r3, r2
 8000f92:	b25b      	sxtb	r3, r3
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	701a      	strb	r2, [r3, #0]
    }
    if (duplicate) {
 8000f9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d006      	beq.n	8000fb0 <MqttEncode_FixedHeader+0x6e>
        header->type_flags |=
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	f043 0308 	orr.w	r3, r3, #8
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	701a      	strb	r2, [r3, #0]
            MQTT_PACKET_FLAGS_SET(MQTT_PACKET_FLAG_DUPLICATE);
    }

    /* Encode the length remaining into the header */
    header_len = MqttEncode_RemainLen(header, tx_buf_len, remain_len);
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	68b9      	ldr	r1, [r7, #8]
 8000fb4:	6978      	ldr	r0, [r7, #20]
 8000fb6:	f000 f89f 	bl	80010f8 <MqttEncode_RemainLen>
 8000fba:	6138      	str	r0, [r7, #16]
    if (header_len < 0) {
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	da01      	bge.n	8000fc6 <MqttEncode_FixedHeader+0x84>
        return header_len;
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	e000      	b.n	8000fc8 <MqttEncode_FixedHeader+0x86>
    }

    return header_len;
 8000fc6:	693b      	ldr	r3, [r7, #16]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <MqttDecode_FixedHeader>:

static int MqttDecode_FixedHeader(byte *rx_buf, int rx_buf_len,
    int *remain_len, byte type, MqttQoS *p_qos, byte *p_retain,
    byte *p_duplicate)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
 8000fdc:	70fb      	strb	r3, [r7, #3]
    int header_len;
    MqttPacket* header = (MqttPacket*)rx_buf;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	617b      	str	r3, [r7, #20]

    /* Decode the length remaining */
    header_len = MqttDecode_RemainLen(header, rx_buf_len, remain_len);
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	68b9      	ldr	r1, [r7, #8]
 8000fe6:	6978      	ldr	r0, [r7, #20]
 8000fe8:	f000 f840 	bl	800106c <MqttDecode_RemainLen>
 8000fec:	6138      	str	r0, [r7, #16]
    if (header_len < 0) {
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	da01      	bge.n	8000ff8 <MqttDecode_FixedHeader+0x28>
        return header_len;
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	e035      	b.n	8001064 <MqttDecode_FixedHeader+0x94>
    }

    /* Validate packet type */
    if (MQTT_PACKET_TYPE_GET(header->type_flags) != type) {
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	091b      	lsrs	r3, r3, #4
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	f003 020f 	and.w	r2, r3, #15
 8001004:	78fb      	ldrb	r3, [r7, #3]
 8001006:	429a      	cmp	r2, r3
 8001008:	d002      	beq.n	8001010 <MqttDecode_FixedHeader+0x40>
        return MQTT_CODE_ERROR_PACKET_TYPE;
 800100a:	f06f 0303 	mvn.w	r3, #3
 800100e:	e029      	b.n	8001064 <MqttDecode_FixedHeader+0x94>
    }

    /* Extract header flags */
    if (p_qos) {
 8001010:	6a3b      	ldr	r3, [r7, #32]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d007      	beq.n	8001026 <MqttDecode_FixedHeader+0x56>
        *p_qos = (MqttQoS)MQTT_PACKET_FLAGS_GET_QOS(header->type_flags);
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	105b      	asrs	r3, r3, #1
 800101c:	f003 0303 	and.w	r3, r3, #3
 8001020:	b2da      	uxtb	r2, r3
 8001022:	6a3b      	ldr	r3, [r7, #32]
 8001024:	701a      	strb	r2, [r3, #0]
    }
    if (p_retain) {
 8001026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001028:	2b00      	cmp	r3, #0
 800102a:	d00b      	beq.n	8001044 <MqttDecode_FixedHeader+0x74>
        *p_retain = (MQTT_PACKET_FLAGS_GET(header->type_flags) &
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	f003 0301 	and.w	r3, r3, #1
            MQTT_PACKET_FLAG_RETAIN) ? 1 : 0;
 8001034:	2b00      	cmp	r3, #0
 8001036:	bf14      	ite	ne
 8001038:	2301      	movne	r3, #1
 800103a:	2300      	moveq	r3, #0
 800103c:	b2db      	uxtb	r3, r3
 800103e:	461a      	mov	r2, r3
        *p_retain = (MQTT_PACKET_FLAGS_GET(header->type_flags) &
 8001040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001042:	701a      	strb	r2, [r3, #0]
    }
    if (p_duplicate) {
 8001044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001046:	2b00      	cmp	r3, #0
 8001048:	d00b      	beq.n	8001062 <MqttDecode_FixedHeader+0x92>
        *p_duplicate = (MQTT_PACKET_FLAGS_GET(header->type_flags) &
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	f003 0308 	and.w	r3, r3, #8
            MQTT_PACKET_FLAG_DUPLICATE) ? 1 : 0;
 8001052:	2b00      	cmp	r3, #0
 8001054:	bf14      	ite	ne
 8001056:	2301      	movne	r3, #1
 8001058:	2300      	moveq	r3, #0
 800105a:	b2db      	uxtb	r3, r3
 800105c:	461a      	mov	r2, r3
        *p_duplicate = (MQTT_PACKET_FLAGS_GET(header->type_flags) &
 800105e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001060:	701a      	strb	r2, [r3, #0]
    }

    return header_len;
 8001062:	693b      	ldr	r3, [r7, #16]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <MqttDecode_RemainLen>:


/* Packet Element Encoders/Decoders */
/* Returns number of decoded bytes, errors are negative value */
int MqttDecode_RemainLen(MqttPacket *header, int buf_len, int *remain_len)
{
 800106c:	b480      	push	{r7}
 800106e:	b089      	sub	sp, #36	; 0x24
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
    int decode_bytes = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	61fb      	str	r3, [r7, #28]
    int multiplier = 1;
 800107c:	2301      	movs	r3, #1
 800107e:	61bb      	str	r3, [r7, #24]
    byte tmp_len;

    if (header == NULL || remain_len == NULL || buf_len <= 0) {
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d005      	beq.n	8001092 <MqttDecode_RemainLen+0x26>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d002      	beq.n	8001092 <MqttDecode_RemainLen+0x26>
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	2b00      	cmp	r3, #0
 8001090:	dc02      	bgt.n	8001098 <MqttDecode_RemainLen+0x2c>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001092:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001096:	e02a      	b.n	80010ee <MqttDecode_RemainLen+0x82>
    }

    *remain_len = 0;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
    do {
        /* Check decoded length byte count */
        if ((decode_bytes + 1) >= buf_len) {
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	1c5a      	adds	r2, r3, #1
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	db01      	blt.n	80010ac <MqttDecode_RemainLen+0x40>
            return 0; /* Zero incidates we need another byte */
 80010a8:	2300      	movs	r3, #0
 80010aa:	e020      	b.n	80010ee <MqttDecode_RemainLen+0x82>
        }
        if (decode_bytes >= MQTT_PACKET_MAX_LEN_BYTES) {
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	2b03      	cmp	r3, #3
 80010b0:	dd02      	ble.n	80010b8 <MqttDecode_RemainLen+0x4c>
            return MQTT_CODE_ERROR_MALFORMED_DATA;
 80010b2:	f06f 0302 	mvn.w	r3, #2
 80010b6:	e01a      	b.n	80010ee <MqttDecode_RemainLen+0x82>
        }

        /* Decode Length */
        tmp_len = header->len[decode_bytes++];
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	1c5a      	adds	r2, r3, #1
 80010bc:	61fa      	str	r2, [r7, #28]
 80010be:	68fa      	ldr	r2, [r7, #12]
 80010c0:	4413      	add	r3, r2
 80010c2:	785b      	ldrb	r3, [r3, #1]
 80010c4:	75fb      	strb	r3, [r7, #23]
        *remain_len += (tmp_len & ~MQTT_PACKET_LEN_ENCODE_MASK) * multiplier;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	7dfb      	ldrb	r3, [r7, #23]
 80010cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80010d0:	69b9      	ldr	r1, [r7, #24]
 80010d2:	fb01 f303 	mul.w	r3, r1, r3
 80010d6:	441a      	add	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	601a      	str	r2, [r3, #0]
        multiplier *= MQTT_PACKET_LEN_ENCODE_MASK;
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	01db      	lsls	r3, r3, #7
 80010e0:	61bb      	str	r3, [r7, #24]
    } while (tmp_len & MQTT_PACKET_LEN_ENCODE_MASK);
 80010e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	dbd9      	blt.n	800109e <MqttDecode_RemainLen+0x32>

    return decode_bytes + 1; /* Add byte for header flags/type */
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3301      	adds	r3, #1
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3724      	adds	r7, #36	; 0x24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr

080010f8 <MqttEncode_RemainLen>:

/* Returns number of encoded bytes, errors are negative value */
int MqttEncode_RemainLen(MqttPacket *header, int buf_len, int remain_len)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b087      	sub	sp, #28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
    int encode_bytes = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
    byte tmp_len;

    if (header == NULL || remain_len < 0) {
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d002      	beq.n	8001114 <MqttEncode_RemainLen+0x1c>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2b00      	cmp	r3, #0
 8001112:	da02      	bge.n	800111a <MqttEncode_RemainLen+0x22>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001114:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001118:	e02e      	b.n	8001178 <MqttEncode_RemainLen+0x80>
    }

    do {
        /* Check decoded length byte count */
        if ((encode_bytes + 1) >= buf_len) {
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	1c5a      	adds	r2, r3, #1
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	429a      	cmp	r2, r3
 8001122:	db01      	blt.n	8001128 <MqttEncode_RemainLen+0x30>
            return 0; /* Zero incidates we need another byte */
 8001124:	2300      	movs	r3, #0
 8001126:	e027      	b.n	8001178 <MqttEncode_RemainLen+0x80>
        }
        if (encode_bytes >= MQTT_PACKET_MAX_LEN_BYTES) {
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	2b03      	cmp	r3, #3
 800112c:	dd02      	ble.n	8001134 <MqttEncode_RemainLen+0x3c>
            return MQTT_CODE_ERROR_MALFORMED_DATA;
 800112e:	f06f 0302 	mvn.w	r3, #2
 8001132:	e021      	b.n	8001178 <MqttEncode_RemainLen+0x80>
        }

        /* Encode length */
        tmp_len = (remain_len % MQTT_PACKET_LEN_ENCODE_MASK);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	425a      	negs	r2, r3
 8001138:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800113c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001140:	bf58      	it	pl
 8001142:	4253      	negpl	r3, r2
 8001144:	74fb      	strb	r3, [r7, #19]
        remain_len /= MQTT_PACKET_LEN_ENCODE_MASK;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	da00      	bge.n	800114e <MqttEncode_RemainLen+0x56>
 800114c:	337f      	adds	r3, #127	; 0x7f
 800114e:	11db      	asrs	r3, r3, #7
 8001150:	607b      	str	r3, [r7, #4]

        /* If more length, set the top bit of this byte */
        if (remain_len > 0) {
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2b00      	cmp	r3, #0
 8001156:	dd03      	ble.n	8001160 <MqttEncode_RemainLen+0x68>
            tmp_len |= MQTT_PACKET_LEN_ENCODE_MASK;
 8001158:	7cfb      	ldrb	r3, [r7, #19]
 800115a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800115e:	74fb      	strb	r3, [r7, #19]
        }
        header->len[encode_bytes++] = tmp_len;
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	1c5a      	adds	r2, r3, #1
 8001164:	617a      	str	r2, [r7, #20]
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	4413      	add	r3, r2
 800116a:	7cfa      	ldrb	r2, [r7, #19]
 800116c:	705a      	strb	r2, [r3, #1]
    } while (remain_len > 0);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b00      	cmp	r3, #0
 8001172:	dcd2      	bgt.n	800111a <MqttEncode_RemainLen+0x22>

    return encode_bytes + 1; /* Add byte for header flags/type */
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	3301      	adds	r3, #1
}
 8001178:	4618      	mov	r0, r3
 800117a:	371c      	adds	r7, #28
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr

08001182 <MqttDecode_Num>:

/* Returns number of buffer bytes decoded */
int MqttDecode_Num(byte* buf, word16 *len)
{
 8001182:	b480      	push	{r7}
 8001184:	b083      	sub	sp, #12
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
 800118a:	6039      	str	r1, [r7, #0]
    if (len) {
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d011      	beq.n	80011b6 <MqttDecode_Num+0x34>
        *len = buf[0];
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	b29a      	uxth	r2, r3
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	801a      	strh	r2, [r3, #0]
        *len = (*len << 8) | buf[1];
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	021b      	lsls	r3, r3, #8
 80011a2:	b21a      	sxth	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3301      	adds	r3, #1
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	b21b      	sxth	r3, r3
 80011ac:	4313      	orrs	r3, r2
 80011ae:	b21b      	sxth	r3, r3
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	801a      	strh	r2, [r3, #0]
    }
    return MQTT_DATA_LEN_SIZE;
 80011b6:	2302      	movs	r3, #2
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr

080011c2 <MqttEncode_Num>:

/* Returns number of buffer bytes encoded */
int MqttEncode_Num(byte *buf, word16 len)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b083      	sub	sp, #12
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
 80011ca:	460b      	mov	r3, r1
 80011cc:	807b      	strh	r3, [r7, #2]
    buf[0] = len >> 8;
 80011ce:	887b      	ldrh	r3, [r7, #2]
 80011d0:	0a1b      	lsrs	r3, r3, #8
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	701a      	strb	r2, [r3, #0]
    buf[1] = len & 0xFF;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	3301      	adds	r3, #1
 80011de:	887a      	ldrh	r2, [r7, #2]
 80011e0:	b2d2      	uxtb	r2, r2
 80011e2:	701a      	strb	r2, [r3, #0]
    return MQTT_DATA_LEN_SIZE;
 80011e4:	2302      	movs	r3, #2
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr

080011f0 <MqttDecode_String>:

/* Returns number of buffer bytes decoded */
/* Returns pointer to string (which is not guarenteed to be null terminated) */
int MqttDecode_String(byte *buf, const char **pstr, word16 *pstr_len)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
    int len;
    word16 str_len;
    len = MqttDecode_Num(buf, &str_len);
 80011fc:	f107 0312 	add.w	r3, r7, #18
 8001200:	4619      	mov	r1, r3
 8001202:	68f8      	ldr	r0, [r7, #12]
 8001204:	f7ff ffbd 	bl	8001182 <MqttDecode_Num>
 8001208:	6178      	str	r0, [r7, #20]
    buf += len;
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	68fa      	ldr	r2, [r7, #12]
 800120e:	4413      	add	r3, r2
 8001210:	60fb      	str	r3, [r7, #12]
    if (pstr_len) {
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d002      	beq.n	800121e <MqttDecode_String+0x2e>
        *pstr_len = str_len;
 8001218:	8a7a      	ldrh	r2, [r7, #18]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	801a      	strh	r2, [r3, #0]
    }
    if (pstr) {
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d002      	beq.n	800122a <MqttDecode_String+0x3a>
        *pstr = (char*)buf;
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	601a      	str	r2, [r3, #0]
    }
    return len + str_len;
 800122a:	8a7b      	ldrh	r3, [r7, #18]
 800122c:	461a      	mov	r2, r3
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	4413      	add	r3, r2
}
 8001232:	4618      	mov	r0, r3
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <MqttEncode_String>:

/* Returns number of buffer bytes encoded */
int MqttEncode_String(byte *buf, const char *str)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b084      	sub	sp, #16
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
 8001242:	6039      	str	r1, [r7, #0]
    int str_len = (int)XSTRLEN(str);
 8001244:	6838      	ldr	r0, [r7, #0]
 8001246:	f7fe ff81 	bl	800014c <strlen>
 800124a:	4603      	mov	r3, r0
 800124c:	60fb      	str	r3, [r7, #12]
    int len = (int)MqttEncode_Num(buf, (word16)str_len);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	b29b      	uxth	r3, r3
 8001252:	4619      	mov	r1, r3
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff ffb4 	bl	80011c2 <MqttEncode_Num>
 800125a:	60b8      	str	r0, [r7, #8]
    buf += len;
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	4413      	add	r3, r2
 8001262:	607b      	str	r3, [r7, #4]
    XMEMCPY(buf, str, str_len);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	461a      	mov	r2, r3
 8001268:	6839      	ldr	r1, [r7, #0]
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f001 fa7a 	bl	8002764 <memcpy>
    return len + str_len;
 8001270:	68ba      	ldr	r2, [r7, #8]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	4413      	add	r3, r2
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <MqttEncode_Data>:

/* Returns number of buffer bytes encoded */
int MqttEncode_Data(byte *buf, const byte *data, word16 data_len)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b086      	sub	sp, #24
 8001282:	af00      	add	r7, sp, #0
 8001284:	60f8      	str	r0, [r7, #12]
 8001286:	60b9      	str	r1, [r7, #8]
 8001288:	4613      	mov	r3, r2
 800128a:	80fb      	strh	r3, [r7, #6]
    int len = (int)MqttEncode_Num(buf, data_len);
 800128c:	88fb      	ldrh	r3, [r7, #6]
 800128e:	4619      	mov	r1, r3
 8001290:	68f8      	ldr	r0, [r7, #12]
 8001292:	f7ff ff96 	bl	80011c2 <MqttEncode_Num>
 8001296:	6178      	str	r0, [r7, #20]
    buf += len;
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	4413      	add	r3, r2
 800129e:	60fb      	str	r3, [r7, #12]
    XMEMCPY(buf, data, data_len);
 80012a0:	88fb      	ldrh	r3, [r7, #6]
 80012a2:	461a      	mov	r2, r3
 80012a4:	68b9      	ldr	r1, [r7, #8]
 80012a6:	68f8      	ldr	r0, [r7, #12]
 80012a8:	f001 fa5c 	bl	8002764 <memcpy>
    return len + data_len;
 80012ac:	88fa      	ldrh	r2, [r7, #6]
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	4413      	add	r3, r2
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <MqttEncode_Connect>:


/* Packet Type Encoders/Decoders */
int MqttEncode_Connect(byte *tx_buf, int tx_buf_len, MqttConnect *connect)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08e      	sub	sp, #56	; 0x38
 80012c0:	af04      	add	r7, sp, #16
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
    int header_len, remain_len;
    MqttConnectPacket packet = MQTT_CONNECT_INIT;
 80012c8:	4a93      	ldr	r2, [pc, #588]	; (8001518 <MqttEncode_Connect+0x25c>)
 80012ca:	f107 0310 	add.w	r3, r7, #16
 80012ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80012d0:	c303      	stmia	r3!, {r0, r1}
 80012d2:	801a      	strh	r2, [r3, #0]
    byte *tx_payload;

    /* Validate required arguments */
    if (tx_buf == NULL || connect == NULL || connect->client_id == NULL) {
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d006      	beq.n	80012e8 <MqttEncode_Connect+0x2c>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d003      	beq.n	80012e8 <MqttEncode_Connect+0x2c>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d102      	bne.n	80012ee <MqttEncode_Connect+0x32>
        return MQTT_CODE_ERROR_BAD_ARG;
 80012e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012ec:	e110      	b.n	8001510 <MqttEncode_Connect+0x254>
    }

    /* Determine packet length */
    /* MQTT Version 4 header is 10 bytes */
    remain_len = sizeof(MqttConnectPacket);
 80012ee:	230a      	movs	r3, #10
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
    remain_len += (int)XSTRLEN(connect->client_id) + MQTT_DATA_LEN_SIZE;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7fe ff28 	bl	800014c <strlen>
 80012fc:	4603      	mov	r3, r0
 80012fe:	3302      	adds	r3, #2
 8001300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001302:	4413      	add	r3, r2
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
    if (connect->enable_lwt) {
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	7b1b      	ldrb	r3, [r3, #12]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d02c      	beq.n	8001368 <MqttEncode_Connect+0xac>
        /* Verify all required fields are present */
        if (connect->lwt_msg == NULL ||
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	691b      	ldr	r3, [r3, #16]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d00e      	beq.n	8001334 <MqttEncode_Connect+0x78>
            connect->lwt_msg->topic_name == NULL ||
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	689b      	ldr	r3, [r3, #8]
        if (connect->lwt_msg == NULL ||
 800131c:	2b00      	cmp	r3, #0
 800131e:	d009      	beq.n	8001334 <MqttEncode_Connect+0x78>
            connect->lwt_msg->buffer == NULL ||
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	691b      	ldr	r3, [r3, #16]
 8001324:	695b      	ldr	r3, [r3, #20]
            connect->lwt_msg->topic_name == NULL ||
 8001326:	2b00      	cmp	r3, #0
 8001328:	d004      	beq.n	8001334 <MqttEncode_Connect+0x78>
            connect->lwt_msg->total_len <= 0)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	691b      	ldr	r3, [r3, #16]
            connect->lwt_msg->buffer == NULL ||
 8001330:	2b00      	cmp	r3, #0
 8001332:	d102      	bne.n	800133a <MqttEncode_Connect+0x7e>
        {
            return MQTT_CODE_ERROR_BAD_ARG;
 8001334:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001338:	e0ea      	b.n	8001510 <MqttEncode_Connect+0x254>
        }

        remain_len += (int)XSTRLEN(connect->lwt_msg->topic_name);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	4618      	mov	r0, r3
 8001342:	f7fe ff03 	bl	800014c <strlen>
 8001346:	4603      	mov	r3, r0
 8001348:	461a      	mov	r2, r3
 800134a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134c:	4413      	add	r3, r2
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
        remain_len += MQTT_DATA_LEN_SIZE;
 8001350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001352:	3302      	adds	r3, #2
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
        remain_len += connect->lwt_msg->total_len;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	691a      	ldr	r2, [r3, #16]
 800135c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135e:	4413      	add	r3, r2
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
        remain_len += MQTT_DATA_LEN_SIZE;
 8001362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001364:	3302      	adds	r3, #2
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if (connect->username) {
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d009      	beq.n	8001384 <MqttEncode_Connect+0xc8>
        remain_len += (int)XSTRLEN(connect->username) + MQTT_DATA_LEN_SIZE;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	695b      	ldr	r3, [r3, #20]
 8001374:	4618      	mov	r0, r3
 8001376:	f7fe fee9 	bl	800014c <strlen>
 800137a:	4603      	mov	r3, r0
 800137c:	3302      	adds	r3, #2
 800137e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001380:	4413      	add	r3, r2
 8001382:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if (connect->password) {
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d009      	beq.n	80013a0 <MqttEncode_Connect+0xe4>
        remain_len += (int)XSTRLEN(connect->password) + MQTT_DATA_LEN_SIZE;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	4618      	mov	r0, r3
 8001392:	f7fe fedb 	bl	800014c <strlen>
 8001396:	4603      	mov	r3, r0
 8001398:	3302      	adds	r3, #2
 800139a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800139c:	4413      	add	r3, r2
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Encode fixed header */
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len, remain_len,
 80013a0:	2300      	movs	r3, #0
 80013a2:	9302      	str	r3, [sp, #8]
 80013a4:	2300      	movs	r3, #0
 80013a6:	9301      	str	r3, [sp, #4]
 80013a8:	2300      	movs	r3, #0
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2301      	movs	r3, #1
 80013ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013b0:	68b9      	ldr	r1, [r7, #8]
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f7ff fdc5 	bl	8000f42 <MqttEncode_FixedHeader>
 80013b8:	61f8      	str	r0, [r7, #28]
        MQTT_PACKET_TYPE_CONNECT, 0, 0, 0);
    if (header_len < 0) {
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	da01      	bge.n	80013c4 <MqttEncode_Connect+0x108>
        return header_len;
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	e0a5      	b.n	8001510 <MqttEncode_Connect+0x254>
    }
    tx_payload = &tx_buf[header_len];
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	4413      	add	r3, r2
 80013ca:	623b      	str	r3, [r7, #32]

    /* Encode variable header */
    /* Set connection flags */
    if (connect->clean_session) {
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	791b      	ldrb	r3, [r3, #4]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d004      	beq.n	80013de <MqttEncode_Connect+0x122>
        packet.flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 80013d4:	7dfb      	ldrb	r3, [r7, #23]
 80013d6:	f043 0302 	orr.w	r3, r3, #2
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	75fb      	strb	r3, [r7, #23]
    }
    if (connect->enable_lwt) {
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	7b1b      	ldrb	r3, [r3, #12]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d021      	beq.n	800142a <MqttEncode_Connect+0x16e>
        packet.flags |= MQTT_CONNECT_FLAG_WILL_FLAG;
 80013e6:	7dfb      	ldrb	r3, [r7, #23]
 80013e8:	f043 0304 	orr.w	r3, r3, #4
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	75fb      	strb	r3, [r7, #23]

        if (connect->lwt_msg->qos) {
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	691b      	ldr	r3, [r3, #16]
 80013f4:	795b      	ldrb	r3, [r3, #5]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00d      	beq.n	8001416 <MqttEncode_Connect+0x15a>
            packet.flags |= MQTT_CONNECT_FLAG_SET_QOS(connect->lwt_msg->qos);
 80013fa:	7dfb      	ldrb	r3, [r7, #23]
 80013fc:	b25a      	sxtb	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	691b      	ldr	r3, [r3, #16]
 8001402:	795b      	ldrb	r3, [r3, #5]
 8001404:	00db      	lsls	r3, r3, #3
 8001406:	b25b      	sxtb	r3, r3
 8001408:	f003 0318 	and.w	r3, r3, #24
 800140c:	b25b      	sxtb	r3, r3
 800140e:	4313      	orrs	r3, r2
 8001410:	b25b      	sxtb	r3, r3
 8001412:	b2db      	uxtb	r3, r3
 8001414:	75fb      	strb	r3, [r7, #23]
        }
        if (connect->lwt_msg->retain) {
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	799b      	ldrb	r3, [r3, #6]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d004      	beq.n	800142a <MqttEncode_Connect+0x16e>
            packet.flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 8001420:	7dfb      	ldrb	r3, [r7, #23]
 8001422:	f043 0320 	orr.w	r3, r3, #32
 8001426:	b2db      	uxtb	r3, r3
 8001428:	75fb      	strb	r3, [r7, #23]
        }
    }
    if (connect->username) {
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d004      	beq.n	800143c <MqttEncode_Connect+0x180>
        packet.flags |= MQTT_CONNECT_FLAG_USERNAME;
 8001432:	7dfb      	ldrb	r3, [r7, #23]
 8001434:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001438:	b2db      	uxtb	r3, r3
 800143a:	75fb      	strb	r3, [r7, #23]
    }
    if (connect->password) {
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d004      	beq.n	800144e <MqttEncode_Connect+0x192>
        packet.flags |= MQTT_CONNECT_FLAG_PASSWORD;
 8001444:	7dfb      	ldrb	r3, [r7, #23]
 8001446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800144a:	b2db      	uxtb	r3, r3
 800144c:	75fb      	strb	r3, [r7, #23]
    }
    MqttEncode_Num((byte*)&packet.keep_alive, connect->keep_alive_sec);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	885a      	ldrh	r2, [r3, #2]
 8001452:	f107 0310 	add.w	r3, r7, #16
 8001456:	3308      	adds	r3, #8
 8001458:	4611      	mov	r1, r2
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff feb1 	bl	80011c2 <MqttEncode_Num>
    XMEMCPY(tx_payload, &packet, sizeof(MqttConnectPacket));
 8001460:	6a3b      	ldr	r3, [r7, #32]
 8001462:	461a      	mov	r2, r3
 8001464:	f107 0310 	add.w	r3, r7, #16
 8001468:	cb03      	ldmia	r3!, {r0, r1}
 800146a:	6010      	str	r0, [r2, #0]
 800146c:	6051      	str	r1, [r2, #4]
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	8113      	strh	r3, [r2, #8]
    tx_payload += sizeof(MqttConnectPacket);
 8001472:	6a3b      	ldr	r3, [r7, #32]
 8001474:	330a      	adds	r3, #10
 8001476:	623b      	str	r3, [r7, #32]

    /* Encode payload */
    tx_payload += MqttEncode_String(tx_payload, connect->client_id);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	4619      	mov	r1, r3
 800147e:	6a38      	ldr	r0, [r7, #32]
 8001480:	f7ff fedb 	bl	800123a <MqttEncode_String>
 8001484:	4603      	mov	r3, r0
 8001486:	461a      	mov	r2, r3
 8001488:	6a3b      	ldr	r3, [r7, #32]
 800148a:	4413      	add	r3, r2
 800148c:	623b      	str	r3, [r7, #32]
    if (connect->enable_lwt) {
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	7b1b      	ldrb	r3, [r3, #12]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d01b      	beq.n	80014ce <MqttEncode_Connect+0x212>
        tx_payload += MqttEncode_String(tx_payload,
            connect->lwt_msg->topic_name);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	691b      	ldr	r3, [r3, #16]
        tx_payload += MqttEncode_String(tx_payload,
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	4619      	mov	r1, r3
 800149e:	6a38      	ldr	r0, [r7, #32]
 80014a0:	f7ff fecb 	bl	800123a <MqttEncode_String>
 80014a4:	4603      	mov	r3, r0
 80014a6:	461a      	mov	r2, r3
 80014a8:	6a3b      	ldr	r3, [r7, #32]
 80014aa:	4413      	add	r3, r2
 80014ac:	623b      	str	r3, [r7, #32]
        tx_payload += MqttEncode_Data(tx_payload,
            connect->lwt_msg->buffer, (word16)connect->lwt_msg->total_len);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	6959      	ldr	r1, [r3, #20]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	691b      	ldr	r3, [r3, #16]
 80014b8:	691b      	ldr	r3, [r3, #16]
        tx_payload += MqttEncode_Data(tx_payload,
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	461a      	mov	r2, r3
 80014be:	6a38      	ldr	r0, [r7, #32]
 80014c0:	f7ff fedd 	bl	800127e <MqttEncode_Data>
 80014c4:	4603      	mov	r3, r0
 80014c6:	461a      	mov	r2, r3
 80014c8:	6a3b      	ldr	r3, [r7, #32]
 80014ca:	4413      	add	r3, r2
 80014cc:	623b      	str	r3, [r7, #32]
    }
    if (connect->username) {
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d00a      	beq.n	80014ec <MqttEncode_Connect+0x230>
        tx_payload += MqttEncode_String(tx_payload, connect->username);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	4619      	mov	r1, r3
 80014dc:	6a38      	ldr	r0, [r7, #32]
 80014de:	f7ff feac 	bl	800123a <MqttEncode_String>
 80014e2:	4603      	mov	r3, r0
 80014e4:	461a      	mov	r2, r3
 80014e6:	6a3b      	ldr	r3, [r7, #32]
 80014e8:	4413      	add	r3, r2
 80014ea:	623b      	str	r3, [r7, #32]
    }
    if (connect->password) {
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d00a      	beq.n	800150a <MqttEncode_Connect+0x24e>
        tx_payload += MqttEncode_String(tx_payload, connect->password);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	4619      	mov	r1, r3
 80014fa:	6a38      	ldr	r0, [r7, #32]
 80014fc:	f7ff fe9d 	bl	800123a <MqttEncode_String>
 8001500:	4603      	mov	r3, r0
 8001502:	461a      	mov	r2, r3
 8001504:	6a3b      	ldr	r3, [r7, #32]
 8001506:	4413      	add	r3, r2
 8001508:	623b      	str	r3, [r7, #32]
    }
    (void)tx_payload;

    /* Return total length of packet */
    return header_len + remain_len;
 800150a:	69fa      	ldr	r2, [r7, #28]
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	4413      	add	r3, r2
}
 8001510:	4618      	mov	r0, r3
 8001512:	3728      	adds	r7, #40	; 0x28
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	080027f0 	.word	0x080027f0

0800151c <MqttDecode_ConnectAck>:

int MqttDecode_ConnectAck(byte *rx_buf, int rx_buf_len,
    MqttConnectAck *connect_ack)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08c      	sub	sp, #48	; 0x30
 8001520:	af04      	add	r7, sp, #16
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
    int header_len, remain_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0) {
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d002      	beq.n	8001534 <MqttDecode_ConnectAck+0x18>
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	2b00      	cmp	r3, #0
 8001532:	dc02      	bgt.n	800153a <MqttDecode_ConnectAck+0x1e>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001534:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001538:	e024      	b.n	8001584 <MqttDecode_ConnectAck+0x68>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 800153a:	f107 0214 	add.w	r2, r7, #20
 800153e:	2300      	movs	r3, #0
 8001540:	9302      	str	r3, [sp, #8]
 8001542:	2300      	movs	r3, #0
 8001544:	9301      	str	r3, [sp, #4]
 8001546:	2300      	movs	r3, #0
 8001548:	9300      	str	r3, [sp, #0]
 800154a:	2302      	movs	r3, #2
 800154c:	68b9      	ldr	r1, [r7, #8]
 800154e:	68f8      	ldr	r0, [r7, #12]
 8001550:	f7ff fd3e 	bl	8000fd0 <MqttDecode_FixedHeader>
 8001554:	61f8      	str	r0, [r7, #28]
        MQTT_PACKET_TYPE_CONNECT_ACK, NULL, NULL, NULL);
    if (header_len < 0) {
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	2b00      	cmp	r3, #0
 800155a:	da01      	bge.n	8001560 <MqttDecode_ConnectAck+0x44>
        return header_len;
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	e011      	b.n	8001584 <MqttDecode_ConnectAck+0x68>
    }
    rx_payload = &rx_buf[header_len];
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	4413      	add	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]

    /* Decode variable header */
    if (connect_ack) {
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d007      	beq.n	800157e <MqttDecode_ConnectAck+0x62>
        connect_ack->flags = rx_payload[0];
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	781a      	ldrb	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	701a      	strb	r2, [r3, #0]
        connect_ack->return_code = rx_payload[1];
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	785a      	ldrb	r2, [r3, #1]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	705a      	strb	r2, [r3, #1]
    }

    /* Return total length of packet */
    return header_len + remain_len;
 800157e:	697a      	ldr	r2, [r7, #20]
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	4413      	add	r3, r2
}
 8001584:	4618      	mov	r0, r3
 8001586:	3720      	adds	r7, #32
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <MqttEncode_Publish>:

int MqttEncode_Publish(byte *tx_buf, int tx_buf_len, MqttPublish *publish)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08c      	sub	sp, #48	; 0x30
 8001590:	af04      	add	r7, sp, #16
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
    int header_len, variable_len, payload_len = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	61bb      	str	r3, [r7, #24]
    byte *tx_payload;

    /* Validate required arguments */
    if (tx_buf == NULL || publish == NULL) {
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d002      	beq.n	80015a8 <MqttEncode_Publish+0x1c>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d102      	bne.n	80015ae <MqttEncode_Publish+0x22>
        return MQTT_CODE_ERROR_BAD_ARG;
 80015a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015ac:	e079      	b.n	80016a2 <MqttEncode_Publish+0x116>
    }

    /* Determine packet length */
    variable_len = (int)XSTRLEN(publish->topic_name) + MQTT_DATA_LEN_SIZE;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7fe fdca 	bl	800014c <strlen>
 80015b8:	4603      	mov	r3, r0
 80015ba:	3302      	adds	r3, #2
 80015bc:	61fb      	str	r3, [r7, #28]
    if (publish->qos > MQTT_QOS_0) {
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	795b      	ldrb	r3, [r3, #5]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d009      	beq.n	80015da <MqttEncode_Publish+0x4e>
        if (publish->packet_id == 0) {
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	885b      	ldrh	r3, [r3, #2]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d102      	bne.n	80015d4 <MqttEncode_Publish+0x48>
            return MQTT_CODE_ERROR_PACKET_ID;
 80015ce:	f06f 0304 	mvn.w	r3, #4
 80015d2:	e066      	b.n	80016a2 <MqttEncode_Publish+0x116>
        }
        variable_len += MQTT_DATA_LEN_SIZE; /* For packet_id */
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	3302      	adds	r3, #2
 80015d8:	61fb      	str	r3, [r7, #28]
    }
    if (publish->buffer && publish->total_len > 0) {
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d006      	beq.n	80015f0 <MqttEncode_Publish+0x64>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d002      	beq.n	80015f0 <MqttEncode_Publish+0x64>
        payload_len = publish->total_len;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	61bb      	str	r3, [r7, #24]
    }

    /* Encode fixed header */
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len,
 80015f0:	69fa      	ldr	r2, [r7, #28]
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	18d0      	adds	r0, r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	799b      	ldrb	r3, [r3, #6]
        variable_len + payload_len, MQTT_PACKET_TYPE_PUBLISH,
        publish->retain, publish->qos, publish->duplicate);
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	7952      	ldrb	r2, [r2, #5]
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len,
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	79c9      	ldrb	r1, [r1, #7]
 8001602:	9102      	str	r1, [sp, #8]
 8001604:	9201      	str	r2, [sp, #4]
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	2303      	movs	r3, #3
 800160a:	4602      	mov	r2, r0
 800160c:	68b9      	ldr	r1, [r7, #8]
 800160e:	68f8      	ldr	r0, [r7, #12]
 8001610:	f7ff fc97 	bl	8000f42 <MqttEncode_FixedHeader>
 8001614:	6138      	str	r0, [r7, #16]
    if (header_len < 0) {
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	2b00      	cmp	r3, #0
 800161a:	da01      	bge.n	8001620 <MqttEncode_Publish+0x94>
        return header_len;
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	e040      	b.n	80016a2 <MqttEncode_Publish+0x116>
    }
    tx_payload = &tx_buf[header_len];
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	4413      	add	r3, r2
 8001626:	617b      	str	r3, [r7, #20]

    /* Encode variable header */
    tx_payload += MqttEncode_String(tx_payload, publish->topic_name);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	4619      	mov	r1, r3
 800162e:	6978      	ldr	r0, [r7, #20]
 8001630:	f7ff fe03 	bl	800123a <MqttEncode_String>
 8001634:	4603      	mov	r3, r0
 8001636:	461a      	mov	r2, r3
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	4413      	add	r3, r2
 800163c:	617b      	str	r3, [r7, #20]
    if (publish->qos > MQTT_QOS_0) {
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	795b      	ldrb	r3, [r3, #5]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d00a      	beq.n	800165c <MqttEncode_Publish+0xd0>
        tx_payload += MqttEncode_Num(tx_payload, publish->packet_id);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	885b      	ldrh	r3, [r3, #2]
 800164a:	4619      	mov	r1, r3
 800164c:	6978      	ldr	r0, [r7, #20]
 800164e:	f7ff fdb8 	bl	80011c2 <MqttEncode_Num>
 8001652:	4603      	mov	r3, r0
 8001654:	461a      	mov	r2, r3
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	4413      	add	r3, r2
 800165a:	617b      	str	r3, [r7, #20]
    }

    /* Encode payload */
    if (payload_len > 0) {
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	2b00      	cmp	r3, #0
 8001660:	dd14      	ble.n	800168c <MqttEncode_Publish+0x100>

        /* Determine max size to copy into tx_payload */
        if (payload_len > (tx_buf_len - (header_len + variable_len))) {
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	4413      	add	r3, r2
 8001668:	68ba      	ldr	r2, [r7, #8]
 800166a:	1ad2      	subs	r2, r2, r3
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	429a      	cmp	r2, r3
 8001670:	da05      	bge.n	800167e <MqttEncode_Publish+0xf2>
            payload_len = (tx_buf_len - (header_len + variable_len));
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	4413      	add	r3, r2
 8001678:	68ba      	ldr	r2, [r7, #8]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	61bb      	str	r3, [r7, #24]
        }
        XMEMCPY(tx_payload, publish->buffer, payload_len);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4619      	mov	r1, r3
 8001686:	6978      	ldr	r0, [r7, #20]
 8001688:	f001 f86c 	bl	8002764 <memcpy>
    }
    publish->buffer_pos = 0;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	621a      	str	r2, [r3, #32]
    publish->buffer_len = payload_len;
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	61da      	str	r2, [r3, #28]

    /* Return length of packet placed into tx_buf */
    return header_len + variable_len + payload_len;
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	441a      	add	r2, r3
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	4413      	add	r3, r2
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3720      	adds	r7, #32
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <MqttDecode_Publish>:

int MqttDecode_Publish(byte *rx_buf, int rx_buf_len, MqttPublish *publish)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b08e      	sub	sp, #56	; 0x38
 80016ae:	af04      	add	r7, sp, #16
 80016b0:	60f8      	str	r0, [r7, #12]
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	607a      	str	r2, [r7, #4]
    int header_len, remain_len, variable_len, payload_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0 || publish == NULL) {
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d005      	beq.n	80016c8 <MqttDecode_Publish+0x1e>
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	dd02      	ble.n	80016c8 <MqttDecode_Publish+0x1e>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d102      	bne.n	80016ce <MqttDecode_Publish+0x24>
        return MQTT_CODE_ERROR_BAD_ARG;
 80016c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016cc:	e060      	b.n	8001790 <MqttDecode_Publish+0xe6>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len,
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	3305      	adds	r3, #5
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	3206      	adds	r2, #6
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	3107      	adds	r1, #7
 80016da:	f107 0014 	add.w	r0, r7, #20
 80016de:	9102      	str	r1, [sp, #8]
 80016e0:	9201      	str	r2, [sp, #4]
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	2303      	movs	r3, #3
 80016e6:	4602      	mov	r2, r0
 80016e8:	68b9      	ldr	r1, [r7, #8]
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f7ff fc70 	bl	8000fd0 <MqttDecode_FixedHeader>
 80016f0:	61f8      	str	r0, [r7, #28]
        &remain_len, MQTT_PACKET_TYPE_PUBLISH, &publish->qos,
        &publish->retain, &publish->duplicate);
    if (header_len < 0) {
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	da01      	bge.n	80016fc <MqttDecode_Publish+0x52>
        return header_len;
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	e049      	b.n	8001790 <MqttDecode_Publish+0xe6>
    }
    rx_payload = &rx_buf[header_len];
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	4413      	add	r3, r2
 8001702:	623b      	str	r3, [r7, #32]

    /* Decode variable header */
    variable_len = MqttDecode_String(rx_payload, &publish->topic_name,
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f103 0108 	add.w	r1, r3, #8
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	330c      	adds	r3, #12
 800170e:	461a      	mov	r2, r3
 8001710:	6a38      	ldr	r0, [r7, #32]
 8001712:	f7ff fd6d 	bl	80011f0 <MqttDecode_String>
 8001716:	6278      	str	r0, [r7, #36]	; 0x24
        &publish->topic_name_len);
    rx_payload += variable_len;
 8001718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171a:	6a3a      	ldr	r2, [r7, #32]
 800171c:	4413      	add	r3, r2
 800171e:	623b      	str	r3, [r7, #32]

    /* If QoS > 0 then get packet Id */
    if (publish->qos > MQTT_QOS_0) {
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	795b      	ldrb	r3, [r3, #5]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d00c      	beq.n	8001742 <MqttDecode_Publish+0x98>
        variable_len += MqttDecode_Num(rx_payload, &publish->packet_id);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3302      	adds	r3, #2
 800172c:	4619      	mov	r1, r3
 800172e:	6a38      	ldr	r0, [r7, #32]
 8001730:	f7ff fd27 	bl	8001182 <MqttDecode_Num>
 8001734:	4602      	mov	r2, r0
 8001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001738:	4413      	add	r3, r2
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
        rx_payload += MQTT_DATA_LEN_SIZE;
 800173c:	6a3b      	ldr	r3, [r7, #32]
 800173e:	3302      	adds	r3, #2
 8001740:	623b      	str	r3, [r7, #32]
    }

    /* Decode Payload */
    payload_len = remain_len - variable_len;
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	61bb      	str	r3, [r7, #24]
    publish->buffer = rx_payload;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a3a      	ldr	r2, [r7, #32]
 800174e:	615a      	str	r2, [r3, #20]
    publish->buffer_pos = 0;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	621a      	str	r2, [r3, #32]
    publish->buffer_len = payload_len;
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	61da      	str	r2, [r3, #28]
    publish->total_len = payload_len;
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	611a      	str	r2, [r3, #16]

    /* Only return the length provided in rx_buf_len */
    if ((int)publish->buffer_len >
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	4619      	mov	r1, r3
        (rx_buf_len - (header_len + variable_len)))
 8001768:	69fa      	ldr	r2, [r7, #28]
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	4413      	add	r3, r2
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	1ad3      	subs	r3, r2, r3
    if ((int)publish->buffer_len >
 8001772:	4299      	cmp	r1, r3
 8001774:	dd07      	ble.n	8001786 <MqttDecode_Publish+0xdc>
    {
        publish->buffer_len = (rx_buf_len - (header_len + variable_len));
 8001776:	69fa      	ldr	r2, [r7, #28]
 8001778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177a:	4413      	add	r3, r2
 800177c:	68ba      	ldr	r2, [r7, #8]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	461a      	mov	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	61da      	str	r2, [r3, #28]
    }

    return header_len + variable_len + payload_len;
 8001786:	69fa      	ldr	r2, [r7, #28]
 8001788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178a:	441a      	add	r2, r3
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	4413      	add	r3, r2
}
 8001790:	4618      	mov	r0, r3
 8001792:	3728      	adds	r7, #40	; 0x28
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <MqttEncode_PublishResp>:

int MqttEncode_PublishResp(byte* tx_buf, int tx_buf_len, byte type,
    MqttPublishResp *publish_resp)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08c      	sub	sp, #48	; 0x30
 800179c:	af04      	add	r7, sp, #16
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	603b      	str	r3, [r7, #0]
 80017a4:	4613      	mov	r3, r2
 80017a6:	71fb      	strb	r3, [r7, #7]
    int header_len, remain_len;
    byte *tx_payload;
    MqttQoS qos;

    /* Validate required arguments */
    if (tx_buf == NULL || publish_resp == NULL) {
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d002      	beq.n	80017b4 <MqttEncode_PublishResp+0x1c>
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d102      	bne.n	80017ba <MqttEncode_PublishResp+0x22>
        return MQTT_CODE_ERROR_BAD_ARG;
 80017b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017b8:	e030      	b.n	800181c <MqttEncode_PublishResp+0x84>
    }

    /* Determine packet length */
    remain_len = MQTT_DATA_LEN_SIZE; /* For packet_id */
 80017ba:	2302      	movs	r3, #2
 80017bc:	61fb      	str	r3, [r7, #28]

    /* Determine Qos value */
    qos = (type == MQTT_PACKET_TYPE_PUBLISH_REL) ? MQTT_QOS_1 : MQTT_QOS_0;
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	2b06      	cmp	r3, #6
 80017c2:	bf0c      	ite	eq
 80017c4:	2301      	moveq	r3, #1
 80017c6:	2300      	movne	r3, #0
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	76fb      	strb	r3, [r7, #27]

    /* Encode fixed header */
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len, remain_len,
 80017cc:	79fa      	ldrb	r2, [r7, #7]
 80017ce:	2300      	movs	r3, #0
 80017d0:	9302      	str	r3, [sp, #8]
 80017d2:	7efb      	ldrb	r3, [r7, #27]
 80017d4:	9301      	str	r3, [sp, #4]
 80017d6:	2300      	movs	r3, #0
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	4613      	mov	r3, r2
 80017dc:	69fa      	ldr	r2, [r7, #28]
 80017de:	68b9      	ldr	r1, [r7, #8]
 80017e0:	68f8      	ldr	r0, [r7, #12]
 80017e2:	f7ff fbae 	bl	8000f42 <MqttEncode_FixedHeader>
 80017e6:	6178      	str	r0, [r7, #20]
        type, 0, qos, 0);
    if (header_len < 0) {
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	da01      	bge.n	80017f2 <MqttEncode_PublishResp+0x5a>
        return header_len;
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	e014      	b.n	800181c <MqttEncode_PublishResp+0x84>
    }
    tx_payload = &tx_buf[header_len];
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	4413      	add	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]

    /* Encode variable header */
    tx_payload += MqttEncode_Num(&tx_buf[header_len], publish_resp->packet_id);
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	441a      	add	r2, r3
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	4619      	mov	r1, r3
 8001806:	4610      	mov	r0, r2
 8001808:	f7ff fcdb 	bl	80011c2 <MqttEncode_Num>
 800180c:	4603      	mov	r3, r0
 800180e:	461a      	mov	r2, r3
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	4413      	add	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
    (void)tx_payload;

    /* Return total length of packet */
    return header_len + remain_len;
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	4413      	add	r3, r2
}
 800181c:	4618      	mov	r0, r3
 800181e:	3720      	adds	r7, #32
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <MqttDecode_PublishResp>:

int MqttDecode_PublishResp(byte* rx_buf, int rx_buf_len, byte type,
    MqttPublishResp *publish_resp)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08c      	sub	sp, #48	; 0x30
 8001828:	af04      	add	r7, sp, #16
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	603b      	str	r3, [r7, #0]
 8001830:	4613      	mov	r3, r2
 8001832:	71fb      	strb	r3, [r7, #7]
    int header_len, remain_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0) {
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d002      	beq.n	8001840 <MqttDecode_PublishResp+0x1c>
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	2b00      	cmp	r3, #0
 800183e:	dc02      	bgt.n	8001846 <MqttDecode_PublishResp+0x22>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001840:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001844:	e027      	b.n	8001896 <MqttDecode_PublishResp+0x72>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 8001846:	79f9      	ldrb	r1, [r7, #7]
 8001848:	f107 0214 	add.w	r2, r7, #20
 800184c:	2300      	movs	r3, #0
 800184e:	9302      	str	r3, [sp, #8]
 8001850:	2300      	movs	r3, #0
 8001852:	9301      	str	r3, [sp, #4]
 8001854:	2300      	movs	r3, #0
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	460b      	mov	r3, r1
 800185a:	68b9      	ldr	r1, [r7, #8]
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	f7ff fbb7 	bl	8000fd0 <MqttDecode_FixedHeader>
 8001862:	61f8      	str	r0, [r7, #28]
        type, NULL, NULL, NULL);
    if (header_len < 0) {
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	2b00      	cmp	r3, #0
 8001868:	da01      	bge.n	800186e <MqttDecode_PublishResp+0x4a>
        return header_len;
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	e013      	b.n	8001896 <MqttDecode_PublishResp+0x72>
    }
    rx_payload = &rx_buf[header_len];
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	68fa      	ldr	r2, [r7, #12]
 8001872:	4413      	add	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]

    /* Decode variable header */
    if (publish_resp) {
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d009      	beq.n	8001890 <MqttDecode_PublishResp+0x6c>
        rx_payload += MqttDecode_Num(rx_payload, &publish_resp->packet_id);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	4619      	mov	r1, r3
 8001880:	69b8      	ldr	r0, [r7, #24]
 8001882:	f7ff fc7e 	bl	8001182 <MqttDecode_Num>
 8001886:	4603      	mov	r3, r0
 8001888:	461a      	mov	r2, r3
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	4413      	add	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
    }
    (void)rx_payload;

    /* Return total length of packet */
    return header_len + remain_len;
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	4413      	add	r3, r2
}
 8001896:	4618      	mov	r0, r3
 8001898:	3720      	adds	r7, #32
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <MqttEncode_Subscribe>:

int MqttEncode_Subscribe(byte *tx_buf, int tx_buf_len,
    MqttSubscribe *subscribe)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b08e      	sub	sp, #56	; 0x38
 80018a2:	af04      	add	r7, sp, #16
 80018a4:	60f8      	str	r0, [r7, #12]
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
    int header_len, remain_len, i;
    byte *tx_payload;
    MqttTopic *topic;

    /* Validate required arguments */
    if (tx_buf == NULL || subscribe == NULL) {
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d002      	beq.n	80018b6 <MqttEncode_Subscribe+0x18>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d102      	bne.n	80018bc <MqttEncode_Subscribe+0x1e>
        return MQTT_CODE_ERROR_BAD_ARG;
 80018b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018ba:	e069      	b.n	8001990 <MqttEncode_Subscribe+0xf2>
    }

    /* Determine packet length */
    remain_len = MQTT_DATA_LEN_SIZE; /* For packet_id */
 80018bc:	2302      	movs	r3, #2
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
    for (i = 0; i < subscribe->topic_count; i++) {
 80018c0:	2300      	movs	r3, #0
 80018c2:	623b      	str	r3, [r7, #32]
 80018c4:	e015      	b.n	80018f2 <MqttEncode_Subscribe+0x54>
        topic = &subscribe->topics[i];
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	6a3b      	ldr	r3, [r7, #32]
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	4413      	add	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        remain_len += (int)XSTRLEN(topic->topic_filter) + MQTT_DATA_LEN_SIZE;
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7fe fc38 	bl	800014c <strlen>
 80018dc:	4603      	mov	r3, r0
 80018de:	3302      	adds	r3, #2
 80018e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018e2:	4413      	add	r3, r2
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
        remain_len++; /* For QoS */
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	3301      	adds	r3, #1
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
    for (i = 0; i < subscribe->topic_count; i++) {
 80018ec:	6a3b      	ldr	r3, [r7, #32]
 80018ee:	3301      	adds	r3, #1
 80018f0:	623b      	str	r3, [r7, #32]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685a      	ldr	r2, [r3, #4]
 80018f6:	6a3b      	ldr	r3, [r7, #32]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	dce4      	bgt.n	80018c6 <MqttEncode_Subscribe+0x28>
    }

    /* Encode fixed header */
    header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len, remain_len,
 80018fc:	2300      	movs	r3, #0
 80018fe:	9302      	str	r3, [sp, #8]
 8001900:	2301      	movs	r3, #1
 8001902:	9301      	str	r3, [sp, #4]
 8001904:	2300      	movs	r3, #0
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	2308      	movs	r3, #8
 800190a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800190c:	68b9      	ldr	r1, [r7, #8]
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	f7ff fb17 	bl	8000f42 <MqttEncode_FixedHeader>
 8001914:	6178      	str	r0, [r7, #20]
        MQTT_PACKET_TYPE_SUBSCRIBE, 0, MQTT_QOS_1, 0);
    if (header_len < 0) {
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	2b00      	cmp	r3, #0
 800191a:	da01      	bge.n	8001920 <MqttEncode_Subscribe+0x82>
        return header_len;
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	e037      	b.n	8001990 <MqttEncode_Subscribe+0xf2>
    }
    tx_payload = &tx_buf[header_len];
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	4413      	add	r3, r2
 8001926:	61fb      	str	r3, [r7, #28]

    /* Encode variable header */
    tx_payload += MqttEncode_Num(&tx_buf[header_len], subscribe->packet_id);
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	441a      	add	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	885b      	ldrh	r3, [r3, #2]
 8001932:	4619      	mov	r1, r3
 8001934:	4610      	mov	r0, r2
 8001936:	f7ff fc44 	bl	80011c2 <MqttEncode_Num>
 800193a:	4603      	mov	r3, r0
 800193c:	461a      	mov	r2, r3
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	4413      	add	r3, r2
 8001942:	61fb      	str	r3, [r7, #28]

    /* Encode payload */
    for (i = 0; i < subscribe->topic_count; i++) {
 8001944:	2300      	movs	r3, #0
 8001946:	623b      	str	r3, [r7, #32]
 8001948:	e01a      	b.n	8001980 <MqttEncode_Subscribe+0xe2>
        topic = &subscribe->topics[i];
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689a      	ldr	r2, [r3, #8]
 800194e:	6a3b      	ldr	r3, [r7, #32]
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	4413      	add	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        tx_payload += MqttEncode_String(tx_payload, topic->topic_filter);
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4619      	mov	r1, r3
 800195c:	69f8      	ldr	r0, [r7, #28]
 800195e:	f7ff fc6c 	bl	800123a <MqttEncode_String>
 8001962:	4603      	mov	r3, r0
 8001964:	461a      	mov	r2, r3
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	4413      	add	r3, r2
 800196a:	61fb      	str	r3, [r7, #28]
        *tx_payload = topic->qos;
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	791a      	ldrb	r2, [r3, #4]
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	701a      	strb	r2, [r3, #0]
        tx_payload++;
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	3301      	adds	r3, #1
 8001978:	61fb      	str	r3, [r7, #28]
    for (i = 0; i < subscribe->topic_count; i++) {
 800197a:	6a3b      	ldr	r3, [r7, #32]
 800197c:	3301      	adds	r3, #1
 800197e:	623b      	str	r3, [r7, #32]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	6a3b      	ldr	r3, [r7, #32]
 8001986:	429a      	cmp	r2, r3
 8001988:	dcdf      	bgt.n	800194a <MqttEncode_Subscribe+0xac>
    }

    /* Return total length of packet */
    return header_len + remain_len;
 800198a:	697a      	ldr	r2, [r7, #20]
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	4413      	add	r3, r2
}
 8001990:	4618      	mov	r0, r3
 8001992:	3728      	adds	r7, #40	; 0x28
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <MqttDecode_SubscribeAck>:

int MqttDecode_SubscribeAck(byte* rx_buf, int rx_buf_len,
    MqttSubscribeAck *subscribe_ack)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08c      	sub	sp, #48	; 0x30
 800199c:	af04      	add	r7, sp, #16
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
    int header_len, remain_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0 || subscribe_ack == NULL) {
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d005      	beq.n	80019b6 <MqttDecode_SubscribeAck+0x1e>
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	dd02      	ble.n	80019b6 <MqttDecode_SubscribeAck+0x1e>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d102      	bne.n	80019bc <MqttDecode_SubscribeAck+0x24>
        return MQTT_CODE_ERROR_BAD_ARG;
 80019b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019ba:	e029      	b.n	8001a10 <MqttDecode_SubscribeAck+0x78>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 80019bc:	f107 0214 	add.w	r2, r7, #20
 80019c0:	2300      	movs	r3, #0
 80019c2:	9302      	str	r3, [sp, #8]
 80019c4:	2300      	movs	r3, #0
 80019c6:	9301      	str	r3, [sp, #4]
 80019c8:	2300      	movs	r3, #0
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	2309      	movs	r3, #9
 80019ce:	68b9      	ldr	r1, [r7, #8]
 80019d0:	68f8      	ldr	r0, [r7, #12]
 80019d2:	f7ff fafd 	bl	8000fd0 <MqttDecode_FixedHeader>
 80019d6:	61f8      	str	r0, [r7, #28]
        MQTT_PACKET_TYPE_SUBSCRIBE_ACK, NULL, NULL, NULL);
    if (header_len < 0) {
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	da01      	bge.n	80019e2 <MqttDecode_SubscribeAck+0x4a>
        return header_len;
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	e016      	b.n	8001a10 <MqttDecode_SubscribeAck+0x78>
    }
    rx_payload = &rx_buf[header_len];
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	68fa      	ldr	r2, [r7, #12]
 80019e6:	4413      	add	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]

    /* Decode variable header */
    if (subscribe_ack) {
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d00c      	beq.n	8001a0a <MqttDecode_SubscribeAck+0x72>
        rx_payload += MqttDecode_Num(rx_payload, &subscribe_ack->packet_id);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4619      	mov	r1, r3
 80019f4:	69b8      	ldr	r0, [r7, #24]
 80019f6:	f7ff fbc4 	bl	8001182 <MqttDecode_Num>
 80019fa:	4603      	mov	r3, r0
 80019fc:	461a      	mov	r2, r3
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	4413      	add	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        subscribe_ack->return_codes = rx_payload; /* List of return codes */
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	605a      	str	r2, [r3, #4]
    }

    /* Return total length of packet */
    return header_len + remain_len;
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	4413      	add	r3, r2
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3720      	adds	r7, #32
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <MqttDecode_UnsubscribeAck>:
    return header_len + remain_len;
}

int MqttDecode_UnsubscribeAck(byte *rx_buf, int rx_buf_len,
    MqttUnsubscribeAck *unsubscribe_ack)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08c      	sub	sp, #48	; 0x30
 8001a1c:	af04      	add	r7, sp, #16
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
    int header_len, remain_len;
    byte *rx_payload;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0 || unsubscribe_ack == NULL) {
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d005      	beq.n	8001a36 <MqttDecode_UnsubscribeAck+0x1e>
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	dd02      	ble.n	8001a36 <MqttDecode_UnsubscribeAck+0x1e>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d102      	bne.n	8001a3c <MqttDecode_UnsubscribeAck+0x24>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001a36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a3a:	e026      	b.n	8001a8a <MqttDecode_UnsubscribeAck+0x72>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 8001a3c:	f107 0214 	add.w	r2, r7, #20
 8001a40:	2300      	movs	r3, #0
 8001a42:	9302      	str	r3, [sp, #8]
 8001a44:	2300      	movs	r3, #0
 8001a46:	9301      	str	r3, [sp, #4]
 8001a48:	2300      	movs	r3, #0
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	230b      	movs	r3, #11
 8001a4e:	68b9      	ldr	r1, [r7, #8]
 8001a50:	68f8      	ldr	r0, [r7, #12]
 8001a52:	f7ff fabd 	bl	8000fd0 <MqttDecode_FixedHeader>
 8001a56:	61f8      	str	r0, [r7, #28]
        MQTT_PACKET_TYPE_UNSUBSCRIBE_ACK, NULL, NULL, NULL);
    if (header_len < 0) {
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	da01      	bge.n	8001a62 <MqttDecode_UnsubscribeAck+0x4a>
        return header_len;
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	e013      	b.n	8001a8a <MqttDecode_UnsubscribeAck+0x72>
    }
    rx_payload = &rx_buf[header_len];
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	68fa      	ldr	r2, [r7, #12]
 8001a66:	4413      	add	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]

    /* Decode variable header */
    if (unsubscribe_ack) {
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d009      	beq.n	8001a84 <MqttDecode_UnsubscribeAck+0x6c>
        rx_payload += MqttDecode_Num(rx_payload, &unsubscribe_ack->packet_id);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4619      	mov	r1, r3
 8001a74:	69b8      	ldr	r0, [r7, #24]
 8001a76:	f7ff fb84 	bl	8001182 <MqttDecode_Num>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	4413      	add	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
    }
    (void)rx_payload;

    /* Return total length of packet */
    return header_len + remain_len;
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	4413      	add	r3, r2
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3720      	adds	r7, #32
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <MqttDecode_Ping>:
    /* Return total length of packet */
    return header_len + remain_len;
}

int MqttDecode_Ping(byte *rx_buf, int rx_buf_len)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b088      	sub	sp, #32
 8001a96:	af04      	add	r7, sp, #16
 8001a98:	6078      	str	r0, [r7, #4]
 8001a9a:	6039      	str	r1, [r7, #0]
    int header_len, remain_len;

    /* Validate required arguments */
    if (rx_buf == NULL || rx_buf_len <= 0) {
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d002      	beq.n	8001aa8 <MqttDecode_Ping+0x16>
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	dc02      	bgt.n	8001aae <MqttDecode_Ping+0x1c>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001aa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001aac:	e015      	b.n	8001ada <MqttDecode_Ping+0x48>
    }

    /* Decode fixed header */
    header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
 8001aae:	f107 0208 	add.w	r2, r7, #8
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	9302      	str	r3, [sp, #8]
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	9301      	str	r3, [sp, #4]
 8001aba:	2300      	movs	r3, #0
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	230d      	movs	r3, #13
 8001ac0:	6839      	ldr	r1, [r7, #0]
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff fa84 	bl	8000fd0 <MqttDecode_FixedHeader>
 8001ac8:	60f8      	str	r0, [r7, #12]
        MQTT_PACKET_TYPE_PING_RESP, NULL, NULL, NULL);
    if (header_len < 0) {
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	da01      	bge.n	8001ad4 <MqttDecode_Ping+0x42>
        return header_len;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	e002      	b.n	8001ada <MqttDecode_Ping+0x48>
    }

    /* Return total length of packet */
    return header_len + remain_len;
 8001ad4:	68ba      	ldr	r2, [r7, #8]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	4413      	add	r3, r2
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <MqttPacket_Write>:
    return header_len;
}


int MqttPacket_Write(MqttClient *client, byte* tx_buf, int tx_buf_len)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b086      	sub	sp, #24
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	60f8      	str	r0, [r7, #12]
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
    int rc;
    rc = MqttSocket_Write(client, tx_buf, tx_buf_len, client->cmd_timeout_ms);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	68b9      	ldr	r1, [r7, #8]
 8001af6:	68f8      	ldr	r0, [r7, #12]
 8001af8:	f000 f8e9 	bl	8001cce <MqttSocket_Write>
 8001afc:	6178      	str	r0, [r7, #20]
    return rc;
 8001afe:	697b      	ldr	r3, [r7, #20]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <MqttPacket_Read>:

/* Read return code is length when > 0 */
int MqttPacket_Read(MqttClient *client, byte* rx_buf, int rx_buf_len,
    int timeout_ms)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b088      	sub	sp, #32
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
 8001b14:	603b      	str	r3, [r7, #0]
    int rc, len, remain_read = 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61fb      	str	r3, [r7, #28]
    MqttPacket* header = (MqttPacket*)rx_buf;
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	61bb      	str	r3, [r7, #24]

    switch (client->packet.stat)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	7f1b      	ldrb	r3, [r3, #28]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d01e      	beq.n	8001b64 <MqttPacket_Read+0x5c>
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d057      	beq.n	8001bda <MqttPacket_Read+0xd2>
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d17e      	bne.n	8001c2c <MqttPacket_Read+0x124>
    {
        case MQTT_PK_BEGIN:
        {
            client->packet.header_len = 2;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2202      	movs	r2, #2
 8001b32:	621a      	str	r2, [r3, #32]
            client->packet.remain_len = 0;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2200      	movs	r2, #0
 8001b38:	625a      	str	r2, [r3, #36]	; 0x24

            /* Read fix header portion */
            rc = MqttSocket_Read(client, rx_buf, client->packet.header_len, timeout_ms);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6a1a      	ldr	r2, [r3, #32]
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	68b9      	ldr	r1, [r7, #8]
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	f000 f92a 	bl	8001d9c <MqttSocket_Read>
 8001b48:	6178      	str	r0, [r7, #20]
            if (rc < 0) {
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	da01      	bge.n	8001b54 <MqttPacket_Read+0x4c>
                return rc;
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	e072      	b.n	8001c3a <MqttPacket_Read+0x132>
            }
            else if (rc != client->packet.header_len) {
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6a1a      	ldr	r2, [r3, #32]
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d002      	beq.n	8001b64 <MqttPacket_Read+0x5c>
                return MQTT_CODE_ERROR_NETWORK;
 8001b5e:	f06f 0307 	mvn.w	r3, #7
 8001b62:	e06a      	b.n	8001c3a <MqttPacket_Read+0x132>
            FALL_THROUGH;
        }

        case MQTT_PK_READ_HEAD:
        {
            client->packet.stat = MQTT_PK_READ_HEAD;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2201      	movs	r2, #1
 8001b68:	771a      	strb	r2, [r3, #28]

            do {
                /* Try and decode remaining length */
                rc = MqttDecode_RemainLen(header, client->packet.header_len, &client->packet.remain_len);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6a19      	ldr	r1, [r3, #32]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	3324      	adds	r3, #36	; 0x24
 8001b72:	461a      	mov	r2, r3
 8001b74:	69b8      	ldr	r0, [r7, #24]
 8001b76:	f7ff fa79 	bl	800106c <MqttDecode_RemainLen>
 8001b7a:	6178      	str	r0, [r7, #20]
                if (rc < 0) { /* Indicates error */
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	da01      	bge.n	8001b86 <MqttPacket_Read+0x7e>
                    return rc;
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	e059      	b.n	8001c3a <MqttPacket_Read+0x132>
                }
                /* Indicates decode success and rc is len of header */
                else if (rc > 0) {
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	dd03      	ble.n	8001b94 <MqttPacket_Read+0x8c>
                    client->packet.header_len = rc;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	621a      	str	r2, [r3, #32]
                    break; /* exit while */
 8001b92:	e022      	b.n	8001bda <MqttPacket_Read+0xd2>
                }

                /* Read next byte and try decode again */
                len = 1;
 8001b94:	2301      	movs	r3, #1
 8001b96:	613b      	str	r3, [r7, #16]
                rc = MqttSocket_Read(client, &rx_buf[client->packet.header_len], len, timeout_ms);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	1899      	adds	r1, r3, r2
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f000 f8f8 	bl	8001d9c <MqttSocket_Read>
 8001bac:	6178      	str	r0, [r7, #20]
                if (rc < 0) {
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	da01      	bge.n	8001bb8 <MqttPacket_Read+0xb0>
                    return rc;
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	e040      	b.n	8001c3a <MqttPacket_Read+0x132>
                }
                else if (rc != len) {
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d002      	beq.n	8001bc6 <MqttPacket_Read+0xbe>
                    return MQTT_CODE_ERROR_NETWORK;
 8001bc0:	f06f 0307 	mvn.w	r3, #7
 8001bc4:	e039      	b.n	8001c3a <MqttPacket_Read+0x132>
                }
                client->packet.header_len += len;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6a1a      	ldr	r2, [r3, #32]
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	441a      	add	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	621a      	str	r2, [r3, #32]

            } while (client->packet.header_len < MQTT_PACKET_MAX_SIZE);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	ddc7      	ble.n	8001b6a <MqttPacket_Read+0x62>
            FALL_THROUGH;
        }

        case MQTT_PK_READ:
        {
            client->packet.stat = MQTT_PK_READ;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2202      	movs	r2, #2
 8001bde:	771a      	strb	r2, [r3, #28]

            /* Make sure it does not overflow rx_buf */
            if (client->packet.remain_len > (rx_buf_len - client->packet.header_len)) {
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	6879      	ldr	r1, [r7, #4]
 8001bea:	1acb      	subs	r3, r1, r3
 8001bec:	429a      	cmp	r2, r3
 8001bee:	dd05      	ble.n	8001bfc <MqttPacket_Read+0xf4>
                client->packet.remain_len = rx_buf_len - client->packet.header_len;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	1ad2      	subs	r2, r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	625a      	str	r2, [r3, #36]	; 0x24
            }

            /* Read remaining */
            if (client->packet.remain_len > 0) {
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	dd12      	ble.n	8001c2a <MqttPacket_Read+0x122>
                rc = MqttSocket_Read(client, &rx_buf[client->packet.header_len],
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	1899      	adds	r1, r3, r2
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	f000 f8c1 	bl	8001d9c <MqttSocket_Read>
 8001c1a:	6178      	str	r0, [r7, #20]
                    client->packet.remain_len, timeout_ms);
                if (rc <= 0) {
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	dc01      	bgt.n	8001c26 <MqttPacket_Read+0x11e>
                    return rc;
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	e009      	b.n	8001c3a <MqttPacket_Read+0x132>
                }
                remain_read = rc;
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	61fb      	str	r3, [r7, #28]
            }

            break;
 8001c2a:	bf00      	nop
        }
    } /* switch (client->packet.stat) */

    /* reset state */
    client->packet.stat = MQTT_PK_BEGIN;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	771a      	strb	r2, [r3, #28]

    /* Return read length */
    return client->packet.header_len + remain_read;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6a1a      	ldr	r2, [r3, #32]
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	4413      	add	r3, r2
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3720      	adds	r7, #32
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <MqttSocket_Init>:
#endif


/* Public Functions */
int MqttSocket_Init(MqttClient *client, MqttNet *net)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b085      	sub	sp, #20
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	6039      	str	r1, [r7, #0]
    int rc = MQTT_CODE_ERROR_BAD_ARG;
 8001c4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c50:	60fb      	str	r3, [r7, #12]
    if (client) {
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d01d      	beq.n	8001c94 <MqttSocket_Init+0x52>
        client->net = net;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	619a      	str	r2, [r3, #24]
        client->flags &= ~(MQTT_CLIENT_FLAG_IS_CONNECTED |
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f023 0203 	bic.w	r2, r3, #3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	601a      	str	r2, [r3, #0]
        client->tls.ssl = NULL;
        client->tls.timeout_ms = client->cmd_timeout_ms;
    #endif

        /* Validate callbacks are not null! */
        if (net && net->connect && net->read && net->write && net->disconnect) {
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d011      	beq.n	8001c94 <MqttSocket_Init+0x52>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d00d      	beq.n	8001c94 <MqttSocket_Init+0x52>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d009      	beq.n	8001c94 <MqttSocket_Init+0x52>
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d005      	beq.n	8001c94 <MqttSocket_Init+0x52>
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MqttSocket_Init+0x52>
            rc = MQTT_CODE_SUCCESS;
 8001c90:	2300      	movs	r3, #0
 8001c92:	60fb      	str	r3, [r7, #12]
        }
    }
    return rc;
 8001c94:	68fb      	ldr	r3, [r7, #12]
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3714      	adds	r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr

08001ca0 <MqttSocket_WriteDo>:

static int MqttSocket_WriteDo(MqttClient *client, const byte* buf, int buf_len,
    int timeout_ms)
{
 8001ca0:	b590      	push	{r4, r7, lr}
 8001ca2:	b087      	sub	sp, #28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
 8001cac:	603b      	str	r3, [r7, #0]
        }
    }
    else
#endif /* ENABLE_MQTT_TLS */
    {
        rc = client->net->write(client->net->context, buf, buf_len,
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	68dc      	ldr	r4, [r3, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	6818      	ldr	r0, [r3, #0]
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	68b9      	ldr	r1, [r7, #8]
 8001cc0:	47a0      	blx	r4
 8001cc2:	6178      	str	r0, [r7, #20]
    if (rc != 0) { /* hide in non-blocking case */
        PRINTF("MqttSocket_Write: Len=%d, Rc=%d", buf_len, rc);
    }
#endif

    return rc;
 8001cc4:	697b      	ldr	r3, [r7, #20]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	371c      	adds	r7, #28
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd90      	pop	{r4, r7, pc}

08001cce <MqttSocket_Write>:

int MqttSocket_Write(MqttClient *client, const byte* buf, int buf_len,
    int timeout_ms)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b086      	sub	sp, #24
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	60f8      	str	r0, [r7, #12]
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	607a      	str	r2, [r7, #4]
 8001cda:	603b      	str	r3, [r7, #0]
    int rc;

    /* Validate arguments */
    if (client == NULL || client->net == NULL || client->net->write == NULL ||
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00e      	beq.n	8001d00 <MqttSocket_Write+0x32>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00a      	beq.n	8001d00 <MqttSocket_Write+0x32>
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d005      	beq.n	8001d00 <MqttSocket_Write+0x32>
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d002      	beq.n	8001d00 <MqttSocket_Write+0x32>
        buf == NULL || buf_len <= 0) {
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	dc02      	bgt.n	8001d06 <MqttSocket_Write+0x38>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001d00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d04:	e02f      	b.n	8001d66 <MqttSocket_Write+0x98>
    }

    /* check for buffer position overflow */
    if (client->write.pos >= buf_len) {
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	db02      	blt.n	8001d16 <MqttSocket_Write+0x48>
        return MQTT_CODE_ERROR_OUT_OF_BUFFER;
 8001d10:	f06f 0301 	mvn.w	r3, #1
 8001d14:	e027      	b.n	8001d66 <MqttSocket_Write+0x98>
        rc = MQTT_CODE_CONTINUE;
    }

#else
    do {
        rc = MqttSocket_WriteDo(client, &buf[client->write.pos],
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	1899      	adds	r1, r3, r2
            buf_len - client->write.pos, timeout_ms);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        rc = MqttSocket_WriteDo(client, &buf[client->write.pos],
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	1ad2      	subs	r2, r2, r3
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f7ff ffb8 	bl	8001ca0 <MqttSocket_WriteDo>
 8001d30:	6178      	str	r0, [r7, #20]
        if (rc <= 0) {
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	dd0b      	ble.n	8001d50 <MqttSocket_Write+0x82>
            break;
        }
        client->write.pos += rc;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	441a      	add	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	635a      	str	r2, [r3, #52]	; 0x34
    } while (client->write.pos < buf_len);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	dbe3      	blt.n	8001d16 <MqttSocket_Write+0x48>
 8001d4e:	e000      	b.n	8001d52 <MqttSocket_Write+0x84>
            break;
 8001d50:	bf00      	nop
#endif /* WOLFMQTT_NONBLOCK */

    /* handle return code */
    if (rc > 0) {
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	dd05      	ble.n	8001d64 <MqttSocket_Write+0x96>
        /* return length write and reset position */
        rc = client->write.pos;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d5c:	617b      	str	r3, [r7, #20]
        client->write.pos = 0;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	635a      	str	r2, [r3, #52]	; 0x34
    }

    return rc;
 8001d64:	697b      	ldr	r3, [r7, #20]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <MqttSocket_ReadDo>:

static int MqttSocket_ReadDo(MqttClient *client, byte* buf, int buf_len,
    int timeout_ms)
{
 8001d6e:	b590      	push	{r4, r7, lr}
 8001d70:	b087      	sub	sp, #28
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	60f8      	str	r0, [r7, #12]
 8001d76:	60b9      	str	r1, [r7, #8]
 8001d78:	607a      	str	r2, [r7, #4]
 8001d7a:	603b      	str	r3, [r7, #0]
        }
    }
    else
#endif /* ENABLE_MQTT_TLS */
    {
        rc = client->net->read(client->net->context, buf, buf_len, timeout_ms);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	689c      	ldr	r4, [r3, #8]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	6818      	ldr	r0, [r3, #0]
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	68b9      	ldr	r1, [r7, #8]
 8001d8e:	47a0      	blx	r4
 8001d90:	6178      	str	r0, [r7, #20]
    if (rc != 0) { /* hide in non-blocking case */
        PRINTF("MqttSocket_Read: Len=%d, Rc=%d", buf_len, rc);
    }
#endif

    return rc;
 8001d92:	697b      	ldr	r3, [r7, #20]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	371c      	adds	r7, #28
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd90      	pop	{r4, r7, pc}

08001d9c <MqttSocket_Read>:

int MqttSocket_Read(MqttClient *client, byte* buf, int buf_len, int timeout_ms)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
 8001da8:	603b      	str	r3, [r7, #0]
    int rc;

    /* Validate arguments */
    if (client == NULL || client->net == NULL || client->net->read == NULL ||
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d00e      	beq.n	8001dce <MqttSocket_Read+0x32>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d00a      	beq.n	8001dce <MqttSocket_Read+0x32>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d005      	beq.n	8001dce <MqttSocket_Read+0x32>
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d002      	beq.n	8001dce <MqttSocket_Read+0x32>
        buf == NULL || buf_len <= 0) {
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	dc02      	bgt.n	8001dd4 <MqttSocket_Read+0x38>
        return MQTT_CODE_ERROR_BAD_ARG;
 8001dce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dd2:	e02f      	b.n	8001e34 <MqttSocket_Read+0x98>
    }

    /* check for buffer position overflow */
    if (client->read.pos >= buf_len) {
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	db02      	blt.n	8001de4 <MqttSocket_Read+0x48>
        return MQTT_CODE_ERROR_OUT_OF_BUFFER;
 8001dde:	f06f 0301 	mvn.w	r3, #1
 8001de2:	e027      	b.n	8001e34 <MqttSocket_Read+0x98>
        rc = MQTT_CODE_CONTINUE;
    }

#else
    do {
        rc = MqttSocket_ReadDo(client, &buf[client->read.pos],
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de8:	461a      	mov	r2, r3
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	1899      	adds	r1, r3, r2
            buf_len - client->read.pos, timeout_ms);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        rc = MqttSocket_ReadDo(client, &buf[client->read.pos],
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	1ad2      	subs	r2, r2, r3
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	68f8      	ldr	r0, [r7, #12]
 8001dfa:	f7ff ffb8 	bl	8001d6e <MqttSocket_ReadDo>
 8001dfe:	6178      	str	r0, [r7, #20]
        if (rc <= 0) {
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	dd0b      	ble.n	8001e1e <MqttSocket_Read+0x82>
            break;
        }
        client->read.pos += rc;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	441a      	add	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	62da      	str	r2, [r3, #44]	; 0x2c
    } while (client->read.pos < buf_len);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	dbe3      	blt.n	8001de4 <MqttSocket_Read+0x48>
 8001e1c:	e000      	b.n	8001e20 <MqttSocket_Read+0x84>
            break;
 8001e1e:	bf00      	nop
#endif /* WOLFMQTT_NONBLOCK */

    /* handle return code */
    if (rc > 0) {
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	dd05      	ble.n	8001e32 <MqttSocket_Read+0x96>
        /* return length read and reset position */
        rc = client->read.pos;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2a:	617b      	str	r3, [r7, #20]
        client->read.pos = 0;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    return rc;
 8001e32:	697b      	ldr	r3, [r7, #20]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <_delay_ms>:
#include "nrf24.h"
#include <string.h>
uint8_t payload_len;


void _delay_ms(int n) {
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]

	int i, j;
	j= n*1000;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e4a:	fb02 f303 	mul.w	r3, r2, r3
 8001e4e:	60bb      	str	r3, [r7, #8]
	while(j--) {
 8001e50:	e007      	b.n	8001e62 <_delay_ms+0x26>
		i=2;
 8001e52:	2302      	movs	r3, #2
 8001e54:	60fb      	str	r3, [r7, #12]
		while(i--);
 8001e56:	bf00      	nop
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	1e5a      	subs	r2, r3, #1
 8001e5c:	60fa      	str	r2, [r7, #12]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1fa      	bne.n	8001e58 <_delay_ms+0x1c>
	while(j--) {
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	1e5a      	subs	r2, r3, #1
 8001e66:	60ba      	str	r2, [r7, #8]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1f2      	bne.n	8001e52 <_delay_ms+0x16>
	}
}
 8001e6c:	bf00      	nop
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bc80      	pop	{r7}
 8001e74:	4770      	bx	lr

08001e76 <l3_receive_packet>:





bool l3_receive_packet(uint8_t *data, uint8_t * packet_buff){
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b084      	sub	sp, #16
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
 8001e7e:	6039      	str	r1, [r7, #0]
	if (data[H_FRM] < data[H_TOTAL]){
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	781a      	ldrb	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3301      	adds	r3, #1
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d21a      	bcs.n	8001ec4 <l3_receive_packet+0x4e>
		uint8_t frm_nb = data[H_FRM];
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	73fb      	strb	r3, [r7, #15]
		memcpy(&packet_buff[L2_DATA_SIZE * frm_nb], &data[0+ L2_HEAD_SIZE], L2_DATA_SIZE);
 8001e94:	7bfa      	ldrb	r2, [r7, #15]
 8001e96:	4613      	mov	r3, r2
 8001e98:	011b      	lsls	r3, r3, #4
 8001e9a:	1a9b      	subs	r3, r3, r2
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	1898      	adds	r0, r3, r2
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3302      	adds	r3, #2
 8001ea8:	221e      	movs	r2, #30
 8001eaa:	4619      	mov	r1, r3
 8001eac:	f000 fc5a 	bl	8002764 <memcpy>
		if ((data[H_FRM]+1) == data[H_TOTAL]){
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	3201      	adds	r2, #1
 8001eba:	7812      	ldrb	r2, [r2, #0]
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d101      	bne.n	8001ec4 <l3_receive_packet+0x4e>
			return true;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e000      	b.n	8001ec6 <l3_receive_packet+0x50>
		}
	}
	return false;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <nrf24_init>:




/* init the hardware pins */
void nrf24_init() {
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	af00      	add	r7, sp, #0
	nrf24_setupPins();
 8001ed2:	f000 fadf 	bl	8002494 <nrf24_setupPins>
	nrf24_ce_digitalWrite(LOW);
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	f000 fae2 	bl	80024a0 <nrf24_ce_digitalWrite>
	nrf24_csn_digitalWrite(HIGH);
 8001edc:	2001      	movs	r0, #1
 8001ede:	f000 faf7 	bl	80024d0 <nrf24_csn_digitalWrite>
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <nRF24_restore_defaults>:


// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_restore_defaults(void) {
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b082      	sub	sp, #8
 8001eea:	af00      	add	r7, sp, #0
	// Write to registers their initial values
	nrf24_configRegister(nRF24_REG_CONFIG, 0x08);
 8001eec:	2108      	movs	r1, #8
 8001eee:	2000      	movs	r0, #0
 8001ef0:	f000 f9d3 	bl	800229a <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_EN_AA, 0x3F);
 8001ef4:	213f      	movs	r1, #63	; 0x3f
 8001ef6:	2001      	movs	r0, #1
 8001ef8:	f000 f9cf 	bl	800229a <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_EN_RXADDR, 0x03);
 8001efc:	2103      	movs	r1, #3
 8001efe:	2002      	movs	r0, #2
 8001f00:	f000 f9cb 	bl	800229a <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_SETUP_AW, 0x03);
 8001f04:	2103      	movs	r1, #3
 8001f06:	2003      	movs	r0, #3
 8001f08:	f000 f9c7 	bl	800229a <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_SETUP_RETR, 0x03);
 8001f0c:	2103      	movs	r1, #3
 8001f0e:	2004      	movs	r0, #4
 8001f10:	f000 f9c3 	bl	800229a <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_RF_CH, 0x02);
 8001f14:	2102      	movs	r1, #2
 8001f16:	2005      	movs	r0, #5
 8001f18:	f000 f9bf 	bl	800229a <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_RF_SETUP, 0x0E);
 8001f1c:	210e      	movs	r1, #14
 8001f1e:	2006      	movs	r0, #6
 8001f20:	f000 f9bb 	bl	800229a <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_STATUS, 0x00);
 8001f24:	2100      	movs	r1, #0
 8001f26:	2007      	movs	r0, #7
 8001f28:	f000 f9b7 	bl	800229a <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_RX_PW_P0, 0x00);
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	2011      	movs	r0, #17
 8001f30:	f000 f9b3 	bl	800229a <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_RX_PW_P1, 0x00);
 8001f34:	2100      	movs	r1, #0
 8001f36:	2012      	movs	r0, #18
 8001f38:	f000 f9af 	bl	800229a <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_RX_PW_P2, 0x00);
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	2013      	movs	r0, #19
 8001f40:	f000 f9ab 	bl	800229a <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_RX_PW_P3, 0x00);
 8001f44:	2100      	movs	r1, #0
 8001f46:	2014      	movs	r0, #20
 8001f48:	f000 f9a7 	bl	800229a <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_RX_PW_P4, 0x00);
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	2015      	movs	r0, #21
 8001f50:	f000 f9a3 	bl	800229a <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_RX_PW_P5, 0x00);
 8001f54:	2100      	movs	r1, #0
 8001f56:	2016      	movs	r0, #22
 8001f58:	f000 f99f 	bl	800229a <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_DYNPD, 0x00);
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	201c      	movs	r0, #28
 8001f60:	f000 f99b 	bl	800229a <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_FEATURE, 0x00);
 8001f64:	2100      	movs	r1, #0
 8001f66:	201d      	movs	r0, #29
 8001f68:	f000 f997 	bl	800229a <nrf24_configRegister>

	// Clear the FIFO's
	spi_transfer(FLUSH_RX);
 8001f6c:	20e2      	movs	r0, #226	; 0xe2
 8001f6e:	f000 f946 	bl	80021fe <spi_transfer>
    spi_transfer(FLUSH_TX);
 8001f72:	20e1      	movs	r0, #225	; 0xe1
 8001f74:	f000 f943 	bl	80021fe <spi_transfer>

	// Clear any pending interrupt flags
	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
    uint8_t reg;

	nrf24_readRegister(nRF24_REG_STATUS, &reg, 1);
 8001f78:	1dfb      	adds	r3, r7, #7
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	2007      	movs	r0, #7
 8001f80:	f000 f9ab 	bl	80022da <nrf24_readRegister>
	reg |= nRF24_MASK_STATUS_IRQ;
 8001f84:	79fb      	ldrb	r3, [r7, #7]
 8001f86:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	71fb      	strb	r3, [r7, #7]
	//nRF24_WriteReg(nRF24_REG_STATUS, reg);
	nrf24_configRegister(nRF24_REG_STATUS, reg);
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	4619      	mov	r1, r3
 8001f92:	2007      	movs	r0, #7
 8001f94:	f000 f981 	bl	800229a <nrf24_configRegister>


}
 8001f98:	bf00      	nop
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <nrf24_config>:



/* configure the module */
void nrf24_config(uint8_t channel, uint8_t pay_length) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	460a      	mov	r2, r1
 8001faa:	71fb      	strb	r3, [r7, #7]
 8001fac:	4613      	mov	r3, r2
 8001fae:	71bb      	strb	r3, [r7, #6]
	/* Use static payload length ... */
	payload_len = pay_length;
 8001fb0:	4a1f      	ldr	r2, [pc, #124]	; (8002030 <nrf24_config+0x90>)
 8001fb2:	79bb      	ldrb	r3, [r7, #6]
 8001fb4:	7013      	strb	r3, [r2, #0]

	// Set RF channel
	nrf24_configRegister(RF_CH, channel);
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	4619      	mov	r1, r3
 8001fba:	2005      	movs	r0, #5
 8001fbc:	f000 f96d 	bl	800229a <nrf24_configRegister>

	// Set length of incoming payload
	nrf24_configRegister(RX_PW_P0, 0x00); // Auto-ACK pipe ...
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	2011      	movs	r0, #17
 8001fc4:	f000 f969 	bl	800229a <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P1, payload_len); // Data payload pipe
 8001fc8:	4b19      	ldr	r3, [pc, #100]	; (8002030 <nrf24_config+0x90>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	4619      	mov	r1, r3
 8001fce:	2012      	movs	r0, #18
 8001fd0:	f000 f963 	bl	800229a <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P2, 0x00); // Pipe not used
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	2013      	movs	r0, #19
 8001fd8:	f000 f95f 	bl	800229a <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P3, 0x00); // Pipe not used
 8001fdc:	2100      	movs	r1, #0
 8001fde:	2014      	movs	r0, #20
 8001fe0:	f000 f95b 	bl	800229a <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P4, 0x00); // Pipe not used
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	2015      	movs	r0, #21
 8001fe8:	f000 f957 	bl	800229a <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P5, 0x00); // Pipe not used
 8001fec:	2100      	movs	r1, #0
 8001fee:	2016      	movs	r0, #22
 8001ff0:	f000 f953 	bl	800229a <nrf24_configRegister>

	// 1 Mbps, TX gain: 0dbm
	nrf24_configRegister(RF_SETUP, (1 << RF_DR_LOW) | ((0x03) << RF_PWR));
 8001ff4:	2126      	movs	r1, #38	; 0x26
 8001ff6:	2006      	movs	r0, #6
 8001ff8:	f000 f94f 	bl	800229a <nrf24_configRegister>
	// CRC enable, 1 byte CRC length
	nrf24_configRegister(CONFIG, nrf24_CONFIG);
 8001ffc:	2108      	movs	r1, #8
 8001ffe:	2000      	movs	r0, #0
 8002000:	f000 f94b 	bl	800229a <nrf24_configRegister>

	// Auto Acknowledgment
	nrf24_configRegister(EN_AA,
 8002004:	2103      	movs	r1, #3
 8002006:	2001      	movs	r0, #1
 8002008:	f000 f947 	bl	800229a <nrf24_configRegister>
			(1 << ENAA_P0) | (1 << ENAA_P1) | (0 << ENAA_P2) | (0 << ENAA_P3)
					| (0 << ENAA_P4) | (0 << ENAA_P5));

	// Enable RX addresses
	nrf24_configRegister(EN_RXADDR,
 800200c:	2103      	movs	r1, #3
 800200e:	2002      	movs	r0, #2
 8002010:	f000 f943 	bl	800229a <nrf24_configRegister>
			(1 << ERX_P0) | (1 << ERX_P1) | (0 << ERX_P2) | (0 << ERX_P3)
					| (0 << ERX_P4) | (0 << ERX_P5));

	// Auto retransmit delay: 1000 us and Up to 15 retransmit trials
	nrf24_configRegister(SETUP_RETR, (0x04 << ARD) | (0x0F << ARC));
 8002014:	214f      	movs	r1, #79	; 0x4f
 8002016:	2004      	movs	r0, #4
 8002018:	f000 f93f 	bl	800229a <nrf24_configRegister>

	// Dynamic length configurations: No dynamic length
	nrf24_configRegister(DYNPD,
 800201c:	2100      	movs	r1, #0
 800201e:	201c      	movs	r0, #28
 8002020:	f000 f93b 	bl	800229a <nrf24_configRegister>
			(0 << DPL_P0) | (0 << DPL_P1) | (0 << DPL_P2) | (0 << DPL_P3)
					| (0 << DPL_P4) | (0 << DPL_P5));

	// Start listening
	nrf24_powerUpRx();
 8002024:	f000 f8c4 	bl	80021b0 <nrf24_powerUpRx>
}
 8002028:	bf00      	nop
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	20000826 	.word	0x20000826

08002034 <nrf24_rx_address>:

/* Set the RX address */
void nrf24_rx_address(uint8_t * adr) {
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
	nrf24_ce_digitalWrite(LOW);
 800203c:	2000      	movs	r0, #0
 800203e:	f000 fa2f 	bl	80024a0 <nrf24_ce_digitalWrite>
	nrf24_writeRegister(RX_ADDR_P1, adr, nrf24_ADDR_LEN);
 8002042:	2205      	movs	r2, #5
 8002044:	6879      	ldr	r1, [r7, #4]
 8002046:	200b      	movs	r0, #11
 8002048:	f000 f966 	bl	8002318 <nrf24_writeRegister>
	nrf24_ce_digitalWrite(HIGH);
 800204c:	2001      	movs	r0, #1
 800204e:	f000 fa27 	bl	80024a0 <nrf24_ce_digitalWrite>
}
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <nrf24_tx_address>:
uint8_t nrf24_payload_length() {
	return payload_len;
}

/* Set the TX address */
void nrf24_tx_address(uint8_t* adr) {
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
	/* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
	nrf24_writeRegister(RX_ADDR_P0, adr, nrf24_ADDR_LEN);
 8002062:	2205      	movs	r2, #5
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	200a      	movs	r0, #10
 8002068:	f000 f956 	bl	8002318 <nrf24_writeRegister>
	nrf24_writeRegister(TX_ADDR, adr, nrf24_ADDR_LEN);
 800206c:	2205      	movs	r2, #5
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	2010      	movs	r0, #16
 8002072:	f000 f951 	bl	8002318 <nrf24_writeRegister>
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <nrf24_dataReady>:

/* Checks if data is available for reading */
/* Returns 1 if data is ready ... */
uint8_t nrf24_dataReady() {
 800207e:	b580      	push	{r7, lr}
 8002080:	b082      	sub	sp, #8
 8002082:	af00      	add	r7, sp, #0
	// See note in getData() function - just checking RX_DR isn't good enough
	uint8_t status = nrf24_getStatus();
 8002084:	f000 f881 	bl	800218a <nrf24_getStatus>
 8002088:	4603      	mov	r3, r0
 800208a:	71fb      	strb	r3, [r7, #7]

	// We can short circuit on RX_DR, but if it's not set, we still need
	// to check the FIFO for any pending packets
	if (status & (1 << RX_DR)) {
 800208c:	79fb      	ldrb	r3, [r7, #7]
 800208e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <nrf24_dataReady+0x1c>
		return 1;
 8002096:	2301      	movs	r3, #1
 8002098:	e007      	b.n	80020aa <nrf24_dataReady+0x2c>
	}

	return !nrf24_rxFifoEmpty();;
 800209a:	f000 f80a 	bl	80020b2 <nrf24_rxFifoEmpty>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	bf0c      	ite	eq
 80020a4:	2301      	moveq	r3, #1
 80020a6:	2300      	movne	r3, #0
 80020a8:	b2db      	uxtb	r3, r3
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <nrf24_rxFifoEmpty>:

/* Checks if receive FIFO is empty or not */
uint8_t nrf24_rxFifoEmpty() {
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b082      	sub	sp, #8
 80020b6:	af00      	add	r7, sp, #0
	uint8_t fifoStatus;

	nrf24_readRegister(FIFO_STATUS, &fifoStatus, 1);
 80020b8:	1dfb      	adds	r3, r7, #7
 80020ba:	2201      	movs	r2, #1
 80020bc:	4619      	mov	r1, r3
 80020be:	2017      	movs	r0, #23
 80020c0:	f000 f90b 	bl	80022da <nrf24_readRegister>

	return (fifoStatus & (1 << RX_EMPTY));
 80020c4:	79fb      	ldrb	r3, [r7, #7]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	b2db      	uxtb	r3, r3
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <nrf24_getData>:
	nrf24_csn_digitalWrite(HIGH);
	return status;
}

/* Reads payload bytes into data array */
void nrf24_getData(uint8_t* data) {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
	/* Pull down chip select */
	nrf24_csn_digitalWrite(LOW);
 80020dc:	2000      	movs	r0, #0
 80020de:	f000 f9f7 	bl	80024d0 <nrf24_csn_digitalWrite>

	/* Send cmd to read rx payload */
	spi_transfer( R_RX_PAYLOAD);
 80020e2:	2061      	movs	r0, #97	; 0x61
 80020e4:	f000 f88b 	bl	80021fe <spi_transfer>

	/* Read payload */
	nrf24_transferSync(data, data, payload_len);
 80020e8:	4b08      	ldr	r3, [pc, #32]	; (800210c <nrf24_getData+0x38>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	461a      	mov	r2, r3
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 f896 	bl	8002222 <nrf24_transferSync>

	/* Pull up chip select */
	nrf24_csn_digitalWrite(HIGH);
 80020f6:	2001      	movs	r0, #1
 80020f8:	f000 f9ea 	bl	80024d0 <nrf24_csn_digitalWrite>

	/* Reset status register */
	nrf24_configRegister(STATUS, (1 << RX_DR));
 80020fc:	2140      	movs	r1, #64	; 0x40
 80020fe:	2007      	movs	r0, #7
 8002100:	f000 f8cb 	bl	800229a <nrf24_configRegister>
}
 8002104:	bf00      	nop
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	20000826 	.word	0x20000826

08002110 <nrf24_send>:
	return rv;
}

// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
void nrf24_send(uint8_t* value) {
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
	/* Go to Standby-I first */
	nrf24_ce_digitalWrite(LOW);
 8002118:	2000      	movs	r0, #0
 800211a:	f000 f9c1 	bl	80024a0 <nrf24_ce_digitalWrite>

	/* Set to transmitter mode , Power up if needed */
	nrf24_powerUpTx();
 800211e:	f000 f862 	bl	80021e6 <nrf24_powerUpTx>
    _delay_ms(50);
 8002122:	2032      	movs	r0, #50	; 0x32
 8002124:	f7ff fe8a 	bl	8001e3c <_delay_ms>
	/* Pull up chip select */
	nrf24_csn_digitalWrite(HIGH);
#endif

	/* Pull down chip select */
	nrf24_csn_digitalWrite(LOW);
 8002128:	2000      	movs	r0, #0
 800212a:	f000 f9d1 	bl	80024d0 <nrf24_csn_digitalWrite>

	/* Write cmd to write payload */
	spi_transfer(W_TX_PAYLOAD);
 800212e:	20a0      	movs	r0, #160	; 0xa0
 8002130:	f000 f865 	bl	80021fe <spi_transfer>

	/* Write payload */
	nrf24_transmitSync(value, payload_len);
 8002134:	4b0a      	ldr	r3, [pc, #40]	; (8002160 <nrf24_send+0x50>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	4619      	mov	r1, r3
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f892 	bl	8002264 <nrf24_transmitSync>

	/* Pull up chip select */
	nrf24_csn_digitalWrite(HIGH);
 8002140:	2001      	movs	r0, #1
 8002142:	f000 f9c5 	bl	80024d0 <nrf24_csn_digitalWrite>

	/* Start the transmission */
	nrf24_ce_digitalWrite(HIGH);
 8002146:	2001      	movs	r0, #1
 8002148:	f000 f9aa 	bl	80024a0 <nrf24_ce_digitalWrite>
	while(nrf24_isSending());
 800214c:	bf00      	nop
 800214e:	f000 f809 	bl	8002164 <nrf24_isSending>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1fa      	bne.n	800214e <nrf24_send+0x3e>
}
 8002158:	bf00      	nop
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	20000826 	.word	0x20000826

08002164 <nrf24_isSending>:

uint8_t nrf24_isSending() {
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
	uint8_t status;

	/* read the current status */
	status = nrf24_getStatus();
 800216a:	f000 f80e 	bl	800218a <nrf24_getStatus>
 800216e:	4603      	mov	r3, r0
 8002170:	71fb      	strb	r3, [r7, #7]

	/* if sending successful (TX_DS) or max retries exceded (MAX_RT). */
	if ((status & ((1 << TX_DS) | (1 << MAX_RT)))) {
 8002172:	79fb      	ldrb	r3, [r7, #7]
 8002174:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <nrf24_isSending+0x1c>
		return 0; /* false */
 800217c:	2300      	movs	r3, #0
 800217e:	e000      	b.n	8002182 <nrf24_isSending+0x1e>
	}

	return 1; /* true */
 8002180:	2301      	movs	r3, #1

}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <nrf24_getStatus>:

uint8_t nrf24_getStatus() {
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
	uint8_t rv;
	nrf24_csn_digitalWrite(LOW);
 8002190:	2000      	movs	r0, #0
 8002192:	f000 f99d 	bl	80024d0 <nrf24_csn_digitalWrite>
	rv = spi_transfer(NOP);
 8002196:	20ff      	movs	r0, #255	; 0xff
 8002198:	f000 f831 	bl	80021fe <spi_transfer>
 800219c:	4603      	mov	r3, r0
 800219e:	71fb      	strb	r3, [r7, #7]
	nrf24_csn_digitalWrite(HIGH);
 80021a0:	2001      	movs	r0, #1
 80021a2:	f000 f995 	bl	80024d0 <nrf24_csn_digitalWrite>
	return rv;
 80021a6:	79fb      	ldrb	r3, [r7, #7]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <nrf24_powerUpRx>:
	else {
		return 0xFF;
	}
}

void nrf24_powerUpRx() {
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
	nrf24_csn_digitalWrite(LOW);
 80021b4:	2000      	movs	r0, #0
 80021b6:	f000 f98b 	bl	80024d0 <nrf24_csn_digitalWrite>
	spi_transfer(FLUSH_RX);
 80021ba:	20e2      	movs	r0, #226	; 0xe2
 80021bc:	f000 f81f 	bl	80021fe <spi_transfer>
	nrf24_csn_digitalWrite(HIGH);
 80021c0:	2001      	movs	r0, #1
 80021c2:	f000 f985 	bl	80024d0 <nrf24_csn_digitalWrite>

	nrf24_configRegister(STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT));
 80021c6:	2170      	movs	r1, #112	; 0x70
 80021c8:	2007      	movs	r0, #7
 80021ca:	f000 f866 	bl	800229a <nrf24_configRegister>

	nrf24_ce_digitalWrite(LOW);
 80021ce:	2000      	movs	r0, #0
 80021d0:	f000 f966 	bl	80024a0 <nrf24_ce_digitalWrite>
	nrf24_configRegister(CONFIG,
 80021d4:	210b      	movs	r1, #11
 80021d6:	2000      	movs	r0, #0
 80021d8:	f000 f85f 	bl	800229a <nrf24_configRegister>
			nrf24_CONFIG | ((1 << PWR_UP) | (1 << PRIM_RX)));
	nrf24_ce_digitalWrite(HIGH);
 80021dc:	2001      	movs	r0, #1
 80021de:	f000 f95f 	bl	80024a0 <nrf24_ce_digitalWrite>
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <nrf24_powerUpTx>:

void nrf24_powerUpTx() {
 80021e6:	b580      	push	{r7, lr}
 80021e8:	af00      	add	r7, sp, #0
	nrf24_configRegister(STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT));
 80021ea:	2170      	movs	r1, #112	; 0x70
 80021ec:	2007      	movs	r0, #7
 80021ee:	f000 f854 	bl	800229a <nrf24_configRegister>

	nrf24_configRegister(CONFIG,
 80021f2:	210a      	movs	r1, #10
 80021f4:	2000      	movs	r0, #0
 80021f6:	f000 f850 	bl	800229a <nrf24_configRegister>
			nrf24_CONFIG | ((1 << PWR_UP) | (0 << PRIM_RX)));
}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}

080021fe <spi_transfer>:
	nrf24_ce_digitalWrite(LOW);
	nrf24_configRegister(CONFIG, nrf24_CONFIG);
}

/* software spi routine */
uint8_t spi_transfer(uint8_t tx) {
 80021fe:	b580      	push	{r7, lr}
 8002200:	b084      	sub	sp, #16
 8002202:	af00      	add	r7, sp, #0
 8002204:	4603      	mov	r3, r0
 8002206:	71fb      	strb	r3, [r7, #7]
	uint8_t rx = 0;
 8002208:	2300      	movs	r3, #0
 800220a:	73fb      	strb	r3, [r7, #15]

	rx = nRF24_LL_RW(tx);
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	4618      	mov	r0, r3
 8002210:	f000 f91a 	bl	8002448 <nRF24_LL_RW>
 8002214:	4603      	mov	r3, r0
 8002216:	73fb      	strb	r3, [r7, #15]

	return rx;
 8002218:	7bfb      	ldrb	r3, [r7, #15]
}
 800221a:	4618      	mov	r0, r3
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <nrf24_transferSync>:

/* send and receive multiple bytes over SPI */
void nrf24_transferSync(uint8_t* dataout, uint8_t* datain, uint8_t len) {
 8002222:	b590      	push	{r4, r7, lr}
 8002224:	b087      	sub	sp, #28
 8002226:	af00      	add	r7, sp, #0
 8002228:	60f8      	str	r0, [r7, #12]
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	4613      	mov	r3, r2
 800222e:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for (i = 0; i < len; i++) {
 8002230:	2300      	movs	r3, #0
 8002232:	75fb      	strb	r3, [r7, #23]
 8002234:	e00e      	b.n	8002254 <nrf24_transferSync+0x32>
		datain[i] = spi_transfer(dataout[i]);
 8002236:	7dfb      	ldrb	r3, [r7, #23]
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	18d4      	adds	r4, r2, r3
 800223c:	7dfb      	ldrb	r3, [r7, #23]
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	4413      	add	r3, r2
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff ffda 	bl	80021fe <spi_transfer>
 800224a:	4603      	mov	r3, r0
 800224c:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < len; i++) {
 800224e:	7dfb      	ldrb	r3, [r7, #23]
 8002250:	3301      	adds	r3, #1
 8002252:	75fb      	strb	r3, [r7, #23]
 8002254:	7dfa      	ldrb	r2, [r7, #23]
 8002256:	79fb      	ldrb	r3, [r7, #7]
 8002258:	429a      	cmp	r2, r3
 800225a:	d3ec      	bcc.n	8002236 <nrf24_transferSync+0x14>
	}

}
 800225c:	bf00      	nop
 800225e:	371c      	adds	r7, #28
 8002260:	46bd      	mov	sp, r7
 8002262:	bd90      	pop	{r4, r7, pc}

08002264 <nrf24_transmitSync>:

/* send multiple bytes over SPI */
void nrf24_transmitSync(uint8_t* dataout, uint8_t len) {
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	460b      	mov	r3, r1
 800226e:	70fb      	strb	r3, [r7, #3]
	uint8_t i;

	for (i = 0; i < len; i++) {
 8002270:	2300      	movs	r3, #0
 8002272:	73fb      	strb	r3, [r7, #15]
 8002274:	e009      	b.n	800228a <nrf24_transmitSync+0x26>
		spi_transfer(dataout[i]);
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	4413      	add	r3, r2
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff ffbd 	bl	80021fe <spi_transfer>
	for (i = 0; i < len; i++) {
 8002284:	7bfb      	ldrb	r3, [r7, #15]
 8002286:	3301      	adds	r3, #1
 8002288:	73fb      	strb	r3, [r7, #15]
 800228a:	7bfa      	ldrb	r2, [r7, #15]
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	429a      	cmp	r2, r3
 8002290:	d3f1      	bcc.n	8002276 <nrf24_transmitSync+0x12>
	}

}
 8002292:	bf00      	nop
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <nrf24_configRegister>:

/* Clocks only one byte into the given nrf24 register */
void nrf24_configRegister(uint8_t reg, uint8_t value) {
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	4603      	mov	r3, r0
 80022a2:	460a      	mov	r2, r1
 80022a4:	71fb      	strb	r3, [r7, #7]
 80022a6:	4613      	mov	r3, r2
 80022a8:	71bb      	strb	r3, [r7, #6]
	nrf24_csn_digitalWrite(LOW);
 80022aa:	2000      	movs	r0, #0
 80022ac:	f000 f910 	bl	80024d0 <nrf24_csn_digitalWrite>
	spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 80022b0:	79fb      	ldrb	r3, [r7, #7]
 80022b2:	f003 031f 	and.w	r3, r3, #31
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	f043 0320 	orr.w	r3, r3, #32
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff ff9d 	bl	80021fe <spi_transfer>
	spi_transfer(value);
 80022c4:	79bb      	ldrb	r3, [r7, #6]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff ff99 	bl	80021fe <spi_transfer>
	nrf24_csn_digitalWrite(HIGH);
 80022cc:	2001      	movs	r0, #1
 80022ce:	f000 f8ff 	bl	80024d0 <nrf24_csn_digitalWrite>
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <nrf24_readRegister>:

/* Read single register from nrf24 */
void nrf24_readRegister(uint8_t reg, uint8_t* value, uint8_t len) {
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	4603      	mov	r3, r0
 80022e2:	6039      	str	r1, [r7, #0]
 80022e4:	71fb      	strb	r3, [r7, #7]
 80022e6:	4613      	mov	r3, r2
 80022e8:	71bb      	strb	r3, [r7, #6]
	nrf24_csn_digitalWrite(LOW);
 80022ea:	2000      	movs	r0, #0
 80022ec:	f000 f8f0 	bl	80024d0 <nrf24_csn_digitalWrite>
	spi_transfer(R_REGISTER | (REGISTER_MASK & reg));
 80022f0:	79fb      	ldrb	r3, [r7, #7]
 80022f2:	f003 031f 	and.w	r3, r3, #31
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff ff80 	bl	80021fe <spi_transfer>
	nrf24_transferSync(value, value, len);
 80022fe:	79bb      	ldrb	r3, [r7, #6]
 8002300:	461a      	mov	r2, r3
 8002302:	6839      	ldr	r1, [r7, #0]
 8002304:	6838      	ldr	r0, [r7, #0]
 8002306:	f7ff ff8c 	bl	8002222 <nrf24_transferSync>
	nrf24_csn_digitalWrite(HIGH);
 800230a:	2001      	movs	r0, #1
 800230c:	f000 f8e0 	bl	80024d0 <nrf24_csn_digitalWrite>
}
 8002310:	bf00      	nop
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <nrf24_writeRegister>:

/* Write to a single register of nrf24 */
void nrf24_writeRegister(uint8_t reg, uint8_t* value, uint8_t len) {
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	6039      	str	r1, [r7, #0]
 8002322:	71fb      	strb	r3, [r7, #7]
 8002324:	4613      	mov	r3, r2
 8002326:	71bb      	strb	r3, [r7, #6]
	nrf24_csn_digitalWrite(LOW);
 8002328:	2000      	movs	r0, #0
 800232a:	f000 f8d1 	bl	80024d0 <nrf24_csn_digitalWrite>
	spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 800232e:	79fb      	ldrb	r3, [r7, #7]
 8002330:	f003 031f 	and.w	r3, r3, #31
 8002334:	b2db      	uxtb	r3, r3
 8002336:	f043 0320 	orr.w	r3, r3, #32
 800233a:	b2db      	uxtb	r3, r3
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff ff5e 	bl	80021fe <spi_transfer>
	nrf24_transmitSync(value, len);
 8002342:	79bb      	ldrb	r3, [r7, #6]
 8002344:	4619      	mov	r1, r3
 8002346:	6838      	ldr	r0, [r7, #0]
 8002348:	f7ff ff8c 	bl	8002264 <nrf24_transmitSync>
	nrf24_csn_digitalWrite(HIGH);
 800234c:	2001      	movs	r0, #1
 800234e:	f000 f8bf 	bl	80024d0 <nrf24_csn_digitalWrite>
}
 8002352:	bf00      	nop
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
	...

0800235c <nRF24_GPIO_Init>:
#include "nrf24_hal.h"
#include "nrf24.h"

// Configure the GPIO lines of the nRF24L01 transceiver
// note: IRQ pin must be configured separately
void nRF24_GPIO_Init(void) {
 800235c:	b580      	push	{r7, lr}
 800235e:	b088      	sub	sp, #32
 8002360:	af00      	add	r7, sp, #0

	SPI_InitTypeDef  SPI_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable SPI1 and GPIOA clocks */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 8002362:	2101      	movs	r1, #1
 8002364:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002368:	f7fd ffd0 	bl	800030c <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 800236c:	2101      	movs	r1, #1
 800236e:	2004      	movs	r0, #4
 8002370:	f7fd ffcc 	bl	800030c <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8002374:	2101      	movs	r1, #1
 8002376:	2008      	movs	r0, #8
 8002378:	f7fd ffc8 	bl	800030c <RCC_APB2PeriphClockCmd>


	//SPI - SCK, MISO, MOSI
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
 800237c:	23e0      	movs	r3, #224	; 0xe0
 800237e:	813b      	strh	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8002380:	2318      	movs	r3, #24
 8002382:	72fb      	strb	r3, [r7, #11]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8002384:	2301      	movs	r3, #1
 8002386:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002388:	f107 0308 	add.w	r3, r7, #8
 800238c:	4619      	mov	r1, r3
 800238e:	482a      	ldr	r0, [pc, #168]	; (8002438 <nRF24_GPIO_Init+0xdc>)
 8002390:	f7fd fee4 	bl	800015c <GPIO_Init>



	//CS hdwr
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
 8002394:	2340      	movs	r3, #64	; 0x40
 8002396:	813b      	strh	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8002398:	2310      	movs	r3, #16
 800239a:	72fb      	strb	r3, [r7, #11]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 800239c:	2301      	movs	r3, #1
 800239e:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80023a0:	f107 0308 	add.w	r3, r7, #8
 80023a4:	4619      	mov	r1, r3
 80023a6:	4825      	ldr	r0, [pc, #148]	; (800243c <nRF24_GPIO_Init+0xe0>)
 80023a8:	f7fd fed8 	bl	800015c <GPIO_Init>


	/* SPI1 configuration */
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80023ac:	2300      	movs	r3, #0
 80023ae:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 80023b0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80023b4:	81fb      	strh	r3, [r7, #14]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 80023b6:	2300      	movs	r3, #0
 80023b8:	823b      	strh	r3, [r7, #16]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 80023ba:	2300      	movs	r3, #0
 80023bc:	827b      	strh	r3, [r7, #18]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 80023be:	2300      	movs	r3, #0
 80023c0:	82bb      	strh	r3, [r7, #20]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 80023c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023c6:	82fb      	strh	r3, [r7, #22]
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
 80023c8:	2318      	movs	r3, #24
 80023ca:	833b      	strh	r3, [r7, #24]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 80023cc:	2300      	movs	r3, #0
 80023ce:	837b      	strh	r3, [r7, #26]
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 80023d0:	2307      	movs	r3, #7
 80023d2:	83bb      	strh	r3, [r7, #28]
	SPI_SSOutputCmd(SPI1, ENABLE);
 80023d4:	2101      	movs	r1, #1
 80023d6:	481a      	ldr	r0, [pc, #104]	; (8002440 <nRF24_GPIO_Init+0xe4>)
 80023d8:	f7fe f832 	bl	8000440 <SPI_SSOutputCmd>
	SPI_Init(SPI1, &SPI_InitStructure);
 80023dc:	f107 030c 	add.w	r3, r7, #12
 80023e0:	4619      	mov	r1, r3
 80023e2:	4817      	ldr	r0, [pc, #92]	; (8002440 <nRF24_GPIO_Init+0xe4>)
 80023e4:	f7fd ffb0 	bl	8000348 <SPI_Init>

	/* Enable SPI1  */
	SPI_Cmd(SPI1, ENABLE);
 80023e8:	2101      	movs	r1, #1
 80023ea:	4815      	ldr	r0, [pc, #84]	; (8002440 <nRF24_GPIO_Init+0xe4>)
 80023ec:	f7fd ffef 	bl	80003ce <SPI_Cmd>


	GPIO_InitTypeDef PORT;

	// Enable the nRF24L01 GPIO peripherals
	RCC->APB2ENR |= nRF24_GPIO_PERIPHERALS;
 80023f0:	4a14      	ldr	r2, [pc, #80]	; (8002444 <nRF24_GPIO_Init+0xe8>)
 80023f2:	4b14      	ldr	r3, [pc, #80]	; (8002444 <nRF24_GPIO_Init+0xe8>)
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	f043 0308 	orr.w	r3, r3, #8
 80023fa:	6193      	str	r3, [r2, #24]

	// Configure CSN pin
	PORT.GPIO_Mode = GPIO_Mode_Out_PP;
 80023fc:	2310      	movs	r3, #16
 80023fe:	71fb      	strb	r3, [r7, #7]
	PORT.GPIO_Speed = GPIO_Speed_2MHz;
 8002400:	2302      	movs	r3, #2
 8002402:	71bb      	strb	r3, [r7, #6]
	PORT.GPIO_Pin = nRF24_CSN_PIN;
 8002404:	2302      	movs	r3, #2
 8002406:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(nRF24_CSN_PORT, &PORT);
 8002408:	1d3b      	adds	r3, r7, #4
 800240a:	4619      	mov	r1, r3
 800240c:	480b      	ldr	r0, [pc, #44]	; (800243c <nRF24_GPIO_Init+0xe0>)
 800240e:	f7fd fea5 	bl	800015c <GPIO_Init>
	nRF24_CSN_H();
 8002412:	2102      	movs	r1, #2
 8002414:	4809      	ldr	r0, [pc, #36]	; (800243c <nRF24_GPIO_Init+0xe0>)
 8002416:	f7fd ff5d 	bl	80002d4 <GPIO_SetBits>

	// Configure CE pin
	PORT.GPIO_Pin = nRF24_CE_PIN;
 800241a:	2301      	movs	r3, #1
 800241c:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(nRF24_CE_PORT, &PORT);
 800241e:	1d3b      	adds	r3, r7, #4
 8002420:	4619      	mov	r1, r3
 8002422:	4806      	ldr	r0, [pc, #24]	; (800243c <nRF24_GPIO_Init+0xe0>)
 8002424:	f7fd fe9a 	bl	800015c <GPIO_Init>
	nRF24_CE_L();
 8002428:	2101      	movs	r1, #1
 800242a:	4804      	ldr	r0, [pc, #16]	; (800243c <nRF24_GPIO_Init+0xe0>)
 800242c:	f7fd ff60 	bl	80002f0 <GPIO_ResetBits>
}
 8002430:	bf00      	nop
 8002432:	3720      	adds	r7, #32
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40010800 	.word	0x40010800
 800243c:	40010c00 	.word	0x40010c00
 8002440:	40013000 	.word	0x40013000
 8002444:	40021000 	.word	0x40021000

08002448 <nRF24_LL_RW>:

// Low level SPI transmit/receive function (hardware depended)
// input:
//   data - value to transmit via SPI
// return: value received from SPI
uint8_t nRF24_LL_RW(uint8_t data) {
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	71fb      	strb	r3, [r7, #7]

	 // Wait until TX buffer is empty
	while (SPI_I2S_GetFlagStatus(nRF24_SPI_PORT, SPI_I2S_FLAG_TXE) == RESET);
 8002452:	bf00      	nop
 8002454:	2102      	movs	r1, #2
 8002456:	480e      	ldr	r0, [pc, #56]	; (8002490 <nRF24_LL_RW+0x48>)
 8002458:	f7fe f811 	bl	800047e <SPI_I2S_GetFlagStatus>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0f8      	beq.n	8002454 <nRF24_LL_RW+0xc>
	// Send byte to SPI (TXE cleared)
	SPI_I2S_SendData(nRF24_SPI_PORT, data);
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	b29b      	uxth	r3, r3
 8002466:	4619      	mov	r1, r3
 8002468:	4809      	ldr	r0, [pc, #36]	; (8002490 <nRF24_LL_RW+0x48>)
 800246a:	f7fd ffcf 	bl	800040c <SPI_I2S_SendData>
	// Wait while receive buffer is empty
	while (SPI_I2S_GetFlagStatus(nRF24_SPI_PORT, SPI_I2S_FLAG_RXNE) == RESET);
 800246e:	bf00      	nop
 8002470:	2101      	movs	r1, #1
 8002472:	4807      	ldr	r0, [pc, #28]	; (8002490 <nRF24_LL_RW+0x48>)
 8002474:	f7fe f803 	bl	800047e <SPI_I2S_GetFlagStatus>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d0f8      	beq.n	8002470 <nRF24_LL_RW+0x28>

	// Return received byte
	return (uint8_t)SPI_I2S_ReceiveData(nRF24_SPI_PORT);
 800247e:	4804      	ldr	r0, [pc, #16]	; (8002490 <nRF24_LL_RW+0x48>)
 8002480:	f7fd ffd2 	bl	8000428 <SPI_I2S_ReceiveData>
 8002484:	4603      	mov	r3, r0
 8002486:	b2db      	uxtb	r3, r3
}
 8002488:	4618      	mov	r0, r3
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40013000 	.word	0x40013000

08002494 <nrf24_setupPins>:
#define clr_bit(reg,bit) reg &= ~(1<<bit)
#define check_bit(reg,bit) (reg&(1<<bit))

/* ------------------------------------------------------------------------- */
void nrf24_setupPins()
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
	nRF24_GPIO_Init();
 8002498:	f7ff ff60 	bl	800235c <nRF24_GPIO_Init>
}
 800249c:	bf00      	nop
 800249e:	bd80      	pop	{r7, pc}

080024a0 <nrf24_ce_digitalWrite>:



/* ------------------------------------------------------------------------- */
void nrf24_ce_digitalWrite(uint8_t state)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	71fb      	strb	r3, [r7, #7]
    if(state)
 80024aa:	79fb      	ldrb	r3, [r7, #7]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d004      	beq.n	80024ba <nrf24_ce_digitalWrite+0x1a>
    {
    	nRF24_CE_H();
 80024b0:	2101      	movs	r1, #1
 80024b2:	4806      	ldr	r0, [pc, #24]	; (80024cc <nrf24_ce_digitalWrite+0x2c>)
 80024b4:	f7fd ff0e 	bl	80002d4 <GPIO_SetBits>
    }
    else
    {
    	 nRF24_CE_L();
    }
}
 80024b8:	e003      	b.n	80024c2 <nrf24_ce_digitalWrite+0x22>
    	 nRF24_CE_L();
 80024ba:	2101      	movs	r1, #1
 80024bc:	4803      	ldr	r0, [pc, #12]	; (80024cc <nrf24_ce_digitalWrite+0x2c>)
 80024be:	f7fd ff17 	bl	80002f0 <GPIO_ResetBits>
}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40010c00 	.word	0x40010c00

080024d0 <nrf24_csn_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_csn_digitalWrite(uint8_t state)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	71fb      	strb	r3, [r7, #7]
    if(state)
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d004      	beq.n	80024ea <nrf24_csn_digitalWrite+0x1a>
    {
    	nRF24_CSN_H();
 80024e0:	2102      	movs	r1, #2
 80024e2:	4806      	ldr	r0, [pc, #24]	; (80024fc <nrf24_csn_digitalWrite+0x2c>)
 80024e4:	f7fd fef6 	bl	80002d4 <GPIO_SetBits>
    }
    else
    {
    	nRF24_CSN_L();
    }
}
 80024e8:	e003      	b.n	80024f2 <nrf24_csn_digitalWrite+0x22>
    	nRF24_CSN_L();
 80024ea:	2102      	movs	r1, #2
 80024ec:	4803      	ldr	r0, [pc, #12]	; (80024fc <nrf24_csn_digitalWrite+0x2c>)
 80024ee:	f7fd feff 	bl	80002f0 <GPIO_ResetBits>
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40010c00 	.word	0x40010c00

08002500 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002500:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002538 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002504:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002506:	e003      	b.n	8002510 <LoopCopyDataInit>

08002508 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002508:	4b0c      	ldr	r3, [pc, #48]	; (800253c <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 800250a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800250c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800250e:	3104      	adds	r1, #4

08002510 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002510:	480b      	ldr	r0, [pc, #44]	; (8002540 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8002512:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8002514:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002516:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002518:	d3f6      	bcc.n	8002508 <CopyDataInit>
	ldr	r2, =_sbss
 800251a:	4a0b      	ldr	r2, [pc, #44]	; (8002548 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 800251c:	e002      	b.n	8002524 <LoopFillZerobss>

0800251e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800251e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002520:	f842 3b04 	str.w	r3, [r2], #4

08002524 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002524:	4b09      	ldr	r3, [pc, #36]	; (800254c <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8002526:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002528:	d3f9      	bcc.n	800251e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800252a:	f000 f83d 	bl	80025a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800252e:	f000 f8f5 	bl	800271c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002532:	f7fe f835 	bl	80005a0 <main>
	bx	lr
 8002536:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002538:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 800253c:	08002804 	.word	0x08002804
	ldr	r0, =_sdata
 8002540:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002544:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8002548:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 800254c:	20000828 	.word	0x20000828

08002550 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002550:	e7fe      	b.n	8002550 <ADC1_2_IRQHandler>

08002552 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002552:	b480      	push	{r7}
 8002554:	af00      	add	r7, sp, #0
}
 8002556:	bf00      	nop
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr

0800255e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800255e:	b480      	push	{r7}
 8002560:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002562:	e7fe      	b.n	8002562 <HardFault_Handler+0x4>

08002564 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002568:	e7fe      	b.n	8002568 <MemManage_Handler+0x4>

0800256a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800256a:	b480      	push	{r7}
 800256c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800256e:	e7fe      	b.n	800256e <BusFault_Handler+0x4>

08002570 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002574:	e7fe      	b.n	8002574 <UsageFault_Handler+0x4>

08002576 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8002576:	b480      	push	{r7}
 8002578:	af00      	add	r7, sp, #0
}
 800257a:	bf00      	nop
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr

08002582 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002582:	b480      	push	{r7}
 8002584:	af00      	add	r7, sp, #0
}
 8002586:	bf00      	nop
 8002588:	46bd      	mov	sp, r7
 800258a:	bc80      	pop	{r7}
 800258c:	4770      	bx	lr

0800258e <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800258e:	b480      	push	{r7}
 8002590:	af00      	add	r7, sp, #0
}
 8002592:	bf00      	nop
 8002594:	46bd      	mov	sp, r7
 8002596:	bc80      	pop	{r7}
 8002598:	4770      	bx	lr

0800259a <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800259a:	b480      	push	{r7}
 800259c:	af00      	add	r7, sp, #0
}
 800259e:	bf00      	nop
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr
	...

080025a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80025ac:	4a15      	ldr	r2, [pc, #84]	; (8002604 <SystemInit+0x5c>)
 80025ae:	4b15      	ldr	r3, [pc, #84]	; (8002604 <SystemInit+0x5c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f043 0301 	orr.w	r3, r3, #1
 80025b6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80025b8:	4912      	ldr	r1, [pc, #72]	; (8002604 <SystemInit+0x5c>)
 80025ba:	4b12      	ldr	r3, [pc, #72]	; (8002604 <SystemInit+0x5c>)
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	4b12      	ldr	r3, [pc, #72]	; (8002608 <SystemInit+0x60>)
 80025c0:	4013      	ands	r3, r2
 80025c2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80025c4:	4a0f      	ldr	r2, [pc, #60]	; (8002604 <SystemInit+0x5c>)
 80025c6:	4b0f      	ldr	r3, [pc, #60]	; (8002604 <SystemInit+0x5c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80025ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025d2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80025d4:	4a0b      	ldr	r2, [pc, #44]	; (8002604 <SystemInit+0x5c>)
 80025d6:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <SystemInit+0x5c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025de:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80025e0:	4a08      	ldr	r2, [pc, #32]	; (8002604 <SystemInit+0x5c>)
 80025e2:	4b08      	ldr	r3, [pc, #32]	; (8002604 <SystemInit+0x5c>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80025ea:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80025ec:	4b05      	ldr	r3, [pc, #20]	; (8002604 <SystemInit+0x5c>)
 80025ee:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80025f2:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80025f4:	f000 f80c 	bl	8002610 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80025f8:	4b04      	ldr	r3, [pc, #16]	; (800260c <SystemInit+0x64>)
 80025fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025fe:	609a      	str	r2, [r3, #8]
#endif 
}
 8002600:	bf00      	nop
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40021000 	.word	0x40021000
 8002608:	f8ff0000 	.word	0xf8ff0000
 800260c:	e000ed00 	.word	0xe000ed00

08002610 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8002614:	f000 f802 	bl	800261c <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8002618:	bf00      	nop
 800261a:	bd80      	pop	{r7, pc}

0800261c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002622:	2300      	movs	r3, #0
 8002624:	607b      	str	r3, [r7, #4]
 8002626:	2300      	movs	r3, #0
 8002628:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800262a:	4a3a      	ldr	r2, [pc, #232]	; (8002714 <SetSysClockTo72+0xf8>)
 800262c:	4b39      	ldr	r3, [pc, #228]	; (8002714 <SetSysClockTo72+0xf8>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002634:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002636:	4b37      	ldr	r3, [pc, #220]	; (8002714 <SetSysClockTo72+0xf8>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3301      	adds	r3, #1
 8002644:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d103      	bne.n	8002654 <SetSysClockTo72+0x38>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002652:	d1f0      	bne.n	8002636 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002654:	4b2f      	ldr	r3, [pc, #188]	; (8002714 <SetSysClockTo72+0xf8>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d002      	beq.n	8002666 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002660:	2301      	movs	r3, #1
 8002662:	603b      	str	r3, [r7, #0]
 8002664:	e001      	b.n	800266a <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002666:	2300      	movs	r3, #0
 8002668:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d14b      	bne.n	8002708 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8002670:	4a29      	ldr	r2, [pc, #164]	; (8002718 <SetSysClockTo72+0xfc>)
 8002672:	4b29      	ldr	r3, [pc, #164]	; (8002718 <SetSysClockTo72+0xfc>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f043 0310 	orr.w	r3, r3, #16
 800267a:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 800267c:	4a26      	ldr	r2, [pc, #152]	; (8002718 <SetSysClockTo72+0xfc>)
 800267e:	4b26      	ldr	r3, [pc, #152]	; (8002718 <SetSysClockTo72+0xfc>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f023 0303 	bic.w	r3, r3, #3
 8002686:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8002688:	4a23      	ldr	r2, [pc, #140]	; (8002718 <SetSysClockTo72+0xfc>)
 800268a:	4b23      	ldr	r3, [pc, #140]	; (8002718 <SetSysClockTo72+0xfc>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f043 0302 	orr.w	r3, r3, #2
 8002692:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8002694:	4a1f      	ldr	r2, [pc, #124]	; (8002714 <SetSysClockTo72+0xf8>)
 8002696:	4b1f      	ldr	r3, [pc, #124]	; (8002714 <SetSysClockTo72+0xf8>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800269c:	4a1d      	ldr	r2, [pc, #116]	; (8002714 <SetSysClockTo72+0xf8>)
 800269e:	4b1d      	ldr	r3, [pc, #116]	; (8002714 <SetSysClockTo72+0xf8>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80026a4:	4a1b      	ldr	r2, [pc, #108]	; (8002714 <SetSysClockTo72+0xf8>)
 80026a6:	4b1b      	ldr	r3, [pc, #108]	; (8002714 <SetSysClockTo72+0xf8>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026ae:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80026b0:	4a18      	ldr	r2, [pc, #96]	; (8002714 <SetSysClockTo72+0xf8>)
 80026b2:	4b18      	ldr	r3, [pc, #96]	; (8002714 <SetSysClockTo72+0xf8>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80026ba:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80026bc:	4a15      	ldr	r2, [pc, #84]	; (8002714 <SetSysClockTo72+0xf8>)
 80026be:	4b15      	ldr	r3, [pc, #84]	; (8002714 <SetSysClockTo72+0xf8>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80026c6:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80026c8:	4a12      	ldr	r2, [pc, #72]	; (8002714 <SetSysClockTo72+0xf8>)
 80026ca:	4b12      	ldr	r3, [pc, #72]	; (8002714 <SetSysClockTo72+0xf8>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026d2:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80026d4:	bf00      	nop
 80026d6:	4b0f      	ldr	r3, [pc, #60]	; (8002714 <SetSysClockTo72+0xf8>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0f9      	beq.n	80026d6 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80026e2:	4a0c      	ldr	r2, [pc, #48]	; (8002714 <SetSysClockTo72+0xf8>)
 80026e4:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <SetSysClockTo72+0xf8>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f023 0303 	bic.w	r3, r3, #3
 80026ec:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80026ee:	4a09      	ldr	r2, [pc, #36]	; (8002714 <SetSysClockTo72+0xf8>)
 80026f0:	4b08      	ldr	r3, [pc, #32]	; (8002714 <SetSysClockTo72+0xf8>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f043 0302 	orr.w	r3, r3, #2
 80026f8:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80026fa:	bf00      	nop
 80026fc:	4b05      	ldr	r3, [pc, #20]	; (8002714 <SetSysClockTo72+0xf8>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f003 030c 	and.w	r3, r3, #12
 8002704:	2b08      	cmp	r3, #8
 8002706:	d1f9      	bne.n	80026fc <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	bc80      	pop	{r7}
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	40021000 	.word	0x40021000
 8002718:	40022000 	.word	0x40022000

0800271c <__libc_init_array>:
 800271c:	b570      	push	{r4, r5, r6, lr}
 800271e:	2500      	movs	r5, #0
 8002720:	4e0c      	ldr	r6, [pc, #48]	; (8002754 <__libc_init_array+0x38>)
 8002722:	4c0d      	ldr	r4, [pc, #52]	; (8002758 <__libc_init_array+0x3c>)
 8002724:	1ba4      	subs	r4, r4, r6
 8002726:	10a4      	asrs	r4, r4, #2
 8002728:	42a5      	cmp	r5, r4
 800272a:	d109      	bne.n	8002740 <__libc_init_array+0x24>
 800272c:	f000 f82e 	bl	800278c <_init>
 8002730:	2500      	movs	r5, #0
 8002732:	4e0a      	ldr	r6, [pc, #40]	; (800275c <__libc_init_array+0x40>)
 8002734:	4c0a      	ldr	r4, [pc, #40]	; (8002760 <__libc_init_array+0x44>)
 8002736:	1ba4      	subs	r4, r4, r6
 8002738:	10a4      	asrs	r4, r4, #2
 800273a:	42a5      	cmp	r5, r4
 800273c:	d105      	bne.n	800274a <__libc_init_array+0x2e>
 800273e:	bd70      	pop	{r4, r5, r6, pc}
 8002740:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002744:	4798      	blx	r3
 8002746:	3501      	adds	r5, #1
 8002748:	e7ee      	b.n	8002728 <__libc_init_array+0xc>
 800274a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800274e:	4798      	blx	r3
 8002750:	3501      	adds	r5, #1
 8002752:	e7f2      	b.n	800273a <__libc_init_array+0x1e>
 8002754:	080027fc 	.word	0x080027fc
 8002758:	080027fc 	.word	0x080027fc
 800275c:	080027fc 	.word	0x080027fc
 8002760:	08002800 	.word	0x08002800

08002764 <memcpy>:
 8002764:	b510      	push	{r4, lr}
 8002766:	1e43      	subs	r3, r0, #1
 8002768:	440a      	add	r2, r1
 800276a:	4291      	cmp	r1, r2
 800276c:	d100      	bne.n	8002770 <memcpy+0xc>
 800276e:	bd10      	pop	{r4, pc}
 8002770:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002774:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002778:	e7f7      	b.n	800276a <memcpy+0x6>

0800277a <memset>:
 800277a:	4603      	mov	r3, r0
 800277c:	4402      	add	r2, r0
 800277e:	4293      	cmp	r3, r2
 8002780:	d100      	bne.n	8002784 <memset+0xa>
 8002782:	4770      	bx	lr
 8002784:	f803 1b01 	strb.w	r1, [r3], #1
 8002788:	e7f9      	b.n	800277e <memset+0x4>
	...

0800278c <_init>:
 800278c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800278e:	bf00      	nop
 8002790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002792:	bc08      	pop	{r3}
 8002794:	469e      	mov	lr, r3
 8002796:	4770      	bx	lr

08002798 <_fini>:
 8002798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800279a:	bf00      	nop
 800279c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800279e:	bc08      	pop	{r3}
 80027a0:	469e      	mov	lr, r3
 80027a2:	4770      	bx	lr
